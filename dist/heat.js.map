{"version":3,"sources":["../src/ts/constant.ts","../src/heat.ts"],"names":["result","render","jsonObject"],"mappings":"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","sourcesContent":["export const ATTRIBUTE_NAME_OPTION = \"data-heat-js\";","/**\n * Heat.js\n * \n * A lightweight JavaScript library that generates customizable heat maps, charts, and statistics to visualize date-based activity and trends.\n * \n * @file        heat.ts\n * @version     v4.0.0\n * @author      Bunoon\n * @license     MIT License\n * @copyright   Bunoon 2024\n */\n\n\nimport {\n    type Configuration,\n    type Holiday,\n    type ColorRange,\n    type BindingOptions,\n    type BindingOptionsCurrentView,\n    type Title,\n    type Description,\n    type Guide,\n    type Tooltip,\n    type Map, \n    type Chart,\n    type Days,\n    type Statistics,\n    type Events } from \"./ts/type\";\n\nimport {\n    EXPORT_TYPE,\n    STRING,\n    VALUE,\n    VIEW_ID,\n    VIEW_NAME } from \"./ts/enum\";\n\nimport { type PublicApi } from \"./ts/api\";\n\n\n( ( documentObject, windowObject, mathObject, jsonObject ) => {\n\n    // Variables: Configuration\n    let _configuration: Configuration = {} as Configuration;\n\n    // Variables: Elements\n    const _elements_Type: object = {};\n    let _elements_Day_Width: number = null;\n\n    // Variables: Date Counts\n    let _elements_DateCounts: object = {};\n\n    // Variables: Internal Names\n    const _internal_Name_Holiday: string = \"HOLIDAY\";\n\n    // Variables: Local Storage\n    const _local_Storage_Start_ID: string = \"HJS_\";\n\n    // Variables: Defaults\n    const _default_MonthsToShow: number[] = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ];\n    const _default_DaysToShow: number[] = [ 1, 2, 3, 4, 5, 6, 7 ];\n\n    // Variables: Attribute Names\n    const _attribute_Name_Options: string = \"data-heat-js\";\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Render:  Disabled Background\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function renderDisabledBackground( bindingOptions: BindingOptions ) : void {\n        bindingOptions._currentView.disabledBackground = createElement( bindingOptions._currentView.element, \"div\", \"disabled\" );\n    }\n\n    function showDisabledBackground( bindingOptions: BindingOptions ) : void {\n        if ( isDefined( bindingOptions._currentView.disabledBackground ) && bindingOptions._currentView.disabledBackground.style.display !== \"block\" ) {\n            bindingOptions._currentView.disabledBackground.style.display = \"block\";\n        }\n    }\n\n    function hideDisabledBackground( bindingOptions: BindingOptions ) : void {\n        if ( isDefined( bindingOptions._currentView.disabledBackground ) && bindingOptions._currentView.disabledBackground.style.display !== \"none\" ) {\n            bindingOptions._currentView.disabledBackground.style.display = \"none\";\n        }\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Render\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function render() : void {\n        const tagTypes: string[] = _configuration.domElementTypes;\n        const tagTypesLength: number = tagTypes.length;\n\n        for ( let tagTypeIndex: number = 0; tagTypeIndex < tagTypesLength; tagTypeIndex++ ) {\n            const domElements: HTMLCollectionOf<Element> = documentObject.getElementsByTagName( tagTypes[ tagTypeIndex ] );\n            const elements: HTMLElement[] = [].slice.call( domElements );\n            const elementsLength: number = elements.length;\n\n            for ( let elementIndex: number = 0; elementIndex < elementsLength; elementIndex++ ) {\n                if ( !renderElement( elements[ elementIndex ] ) ) {\n                    break;\n                }\n            }\n        }\n    }\n\n    function renderElement( element: HTMLElement ) : boolean {\n        let result: boolean = true;\n\n        if ( isDefined( element ) && element.hasAttribute( _attribute_Name_Options ) ) {\n            const bindingOptionsData: string = element.getAttribute( _attribute_Name_Options );\n\n            if ( isDefinedString( bindingOptionsData ) ) {\n                const bindingOptions: any = getObjectFromString( bindingOptionsData );\n\n                if ( bindingOptions.parsed && isDefinedObject( bindingOptions.result ) ) {\n                    renderControl( renderBindingOptions( bindingOptions.result, element ) );\n\n                } else {\n                    if ( !_configuration.safeMode ) {\n                        console.error( _configuration.attributeNotValidErrorText.replace( \"{{attribute_name}}\", _attribute_Name_Options ) );\n                        result = false;\n                    }\n                }\n\n            } else {\n                if ( !_configuration.safeMode ) {\n                    console.error( _configuration.attributeNotSetErrorText.replace( \"{{attribute_name}}\", _attribute_Name_Options ) );\n                    result = false;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    function renderBindingOptions( data: any, element: HTMLElement ) : BindingOptions {\n        const bindingOptions: BindingOptions = buildAttributeOptions( data );\n        const view: string = !isDefinedString( bindingOptions.view ) ? STRING.empty : bindingOptions.view.toLowerCase();\n\n        let currentView: BindingOptionsCurrentView = {} as BindingOptionsCurrentView;\n        currentView.element = element;\n        currentView.disabledBackground = null;\n        currentView.configurationDialog = null;\n        currentView.dayCheckBoxes = [];\n        currentView.monthCheckBoxes = [];\n        currentView.tooltip = null;\n        currentView.tooltipTimer = null;\n        currentView.mapContents = null;\n        currentView.mapContentsScrollLeft = 0;\n        currentView.year = bindingOptions.year;\n        currentView.type = _configuration.unknownTrendText;\n        currentView.isInFetchMode = isDefinedFunction( bindingOptions.events.onDataFetch );\n        currentView.isInFetchModeTimer = null;\n        currentView.yearsAvailable = [];\n\n        if ( bindingOptions.views.chart.enabled ) {\n            currentView.chartContents = null;\n            currentView.chartContentsScrollLeft = 0;\n        }\n\n        if ( bindingOptions.views.days.enabled ) {\n            currentView.daysContents = null;\n            currentView.daysContentsScrollLeft = 0;\n        }\n        \n        if ( bindingOptions.views.statistics.enabled ) {\n            currentView.statisticsContents = null;\n            currentView.statisticsContentsScrollLeft = 0;\n        }\n\n        if ( view === VIEW_NAME.map ) {\n            currentView.view = VIEW_ID.map;\n        } else if ( view === VIEW_NAME.chart ) {\n            currentView.view = VIEW_ID.chart;\n        } else if ( view === VIEW_NAME.days ) {\n            currentView.view = VIEW_ID.days;\n        } else if ( view === VIEW_NAME.statistics ) {\n            currentView.view = VIEW_ID.statistics;\n        } else {\n            currentView.view = VIEW_ID.map;\n        }\n\n        bindingOptions._currentView = currentView;\n\n        return bindingOptions;\n    }\n\n    function renderControl( bindingOptions: BindingOptions ) : void {\n        fireCustomTriggerEvent( bindingOptions.events.onBeforeRender, bindingOptions._currentView.element );\n\n        if ( !isDefinedString( bindingOptions._currentView.element.id ) ) {\n            bindingOptions._currentView.element.id = newGuid();\n        }\n\n        if ( bindingOptions._currentView.element.className.trim() === STRING.empty ) {\n            bindingOptions._currentView.element.className = \"heat-js\";\n        } else {\n            addClass( bindingOptions._currentView.element, \"heat-js\" );\n        }\n\n        bindingOptions._currentView.element.removeAttribute( _attribute_Name_Options );\n\n        createDateStorageForElement( bindingOptions._currentView.element.id, bindingOptions );\n        renderControlContainer( bindingOptions );\n        fireCustomTriggerEvent( bindingOptions.events.onRenderComplete, bindingOptions._currentView.element );\n    }\n\n    function renderControlContainer( bindingOptions: BindingOptions, isForDataRefresh: boolean = false, isForViewSwitch: boolean = false ) : void {\n        if ( isForDataRefresh ) {\n            storeDataInLocalStorage( bindingOptions );\n        }\n\n        if ( isDefined( bindingOptions._currentView.mapContents ) ) {\n            bindingOptions._currentView.mapContentsScrollLeft = bindingOptions._currentView.mapContents.scrollLeft;\n        }\n\n        if ( bindingOptions.views.chart.enabled && isDefined( bindingOptions._currentView.chartContents ) ) {\n            bindingOptions._currentView.chartContentsScrollLeft = bindingOptions._currentView.chartContents.scrollLeft;\n        }\n\n        if ( bindingOptions.views.days.enabled && isDefined( bindingOptions._currentView.daysContents ) ) {\n            bindingOptions._currentView.daysContentsScrollLeft = bindingOptions._currentView.daysContents.scrollLeft;\n        }\n\n        if ( bindingOptions.views.statistics.enabled && isDefined( bindingOptions._currentView.statisticsContents ) ) {\n            bindingOptions._currentView.statisticsContentsScrollLeft = bindingOptions._currentView.statisticsContents.scrollLeft;\n        }\n        \n        bindingOptions._currentView.element.innerHTML = STRING.empty;\n        bindingOptions._currentView.yearsAvailable = getYearsAvailableInData( bindingOptions );\n        \n        hideToolTip( bindingOptions );\n\n        startDataPullTimer( bindingOptions );\n\n        if ( bindingOptions.title.showConfigurationButton ) {\n            renderDisabledBackground( bindingOptions );\n            renderConfigurationDialog( bindingOptions );\n        }\n\n        renderControlToolTip( bindingOptions );\n        renderControlTitleBar( bindingOptions );\n        renderControlMap( bindingOptions, isForViewSwitch );\n\n        if ( bindingOptions.views.chart.enabled ) {\n            renderControlChart( bindingOptions, isForViewSwitch );\n\n            bindingOptions._currentView.chartContents.style.display = \"none\";\n        }\n\n        if ( bindingOptions.views.days.enabled ) {\n            renderControlDays( bindingOptions, isForViewSwitch );\n\n            bindingOptions._currentView.daysContents.style.display = \"none\";\n        }\n\n        if ( bindingOptions.views.statistics.enabled ) {\n            renderControlStatistics( bindingOptions, isForViewSwitch );\n\n            bindingOptions._currentView.statisticsContents.style.display = \"none\";\n        }\n\n        bindingOptions._currentView.mapContents.style.display = \"none\";\n\n        if ( bindingOptions._currentView.view === VIEW_ID.map ) {\n            bindingOptions._currentView.mapContents.style.display = \"block\";\n        } else if ( bindingOptions.views.chart.enabled && bindingOptions._currentView.view === VIEW_ID.chart ) {\n            bindingOptions._currentView.chartContents.style.display = \"block\";\n        } else if ( bindingOptions.views.days.enabled && bindingOptions._currentView.view === VIEW_ID.days ) {\n            bindingOptions._currentView.daysContents.style.display = \"block\";\n        } else if ( bindingOptions.views.statistics.enabled && bindingOptions._currentView.view === VIEW_ID.statistics ) {\n            bindingOptions._currentView.statisticsContents.style.display = \"block\";\n        } else {\n            bindingOptions._currentView.view = VIEW_ID.map;\n            bindingOptions._currentView.mapContents.style.display = \"block\";\n        }\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Render:  Configuration Dialog\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function renderConfigurationDialog( bindingOptions: BindingOptions ) : void {\n        bindingOptions._currentView.configurationDialog = createElement( bindingOptions._currentView.disabledBackground, \"div\", \"dialog configuration\" );\n\n        const titleBar: HTMLElement = createElement( bindingOptions._currentView.configurationDialog, \"div\", \"dialog-title-bar\" );\n        const contents: HTMLElement = createElement( bindingOptions._currentView.configurationDialog, \"div\", \"dialog-contents\" );\n        const closeButton: HTMLElement = createElement( titleBar, \"div\", \"dialog-close\" );\n        const daysContainer: HTMLElement = createElement( contents, \"div\", \"side-container panel\" );\n        const monthsContainer: HTMLElement = createElement( contents, \"div\", \"side-container panel\" );\n\n        createElementWithHTML( titleBar, \"span\", \"dialog-title-bar-text\", _configuration.configurationTitleText );\n        createElementWithHTML( daysContainer, \"div\", \"side-container-title-text\", _configuration.visibleDaysText + STRING.colon );\n        createElementWithHTML( monthsContainer, \"div\", \"side-container-title-text\", _configuration.visibleMonthsText + STRING.colon );\n\n        const months1Container: HTMLElement = createElement( monthsContainer, \"div\", \"side-container\" );\n        const months2Container: HTMLElement = createElement( monthsContainer, \"div\", \"side-container\" );\n\n        closeButton.onclick = function() {\n            hideConfigurationDialog( bindingOptions );\n        };\n\n        for ( let dayIndex: number = 0; dayIndex < 7; dayIndex++ ) {\n            bindingOptions._currentView.dayCheckBoxes[ dayIndex ] = buildCheckBox( daysContainer, _configuration.dayNames[ dayIndex ] ).input;\n        }\n\n        for ( let monthIndex1: number = 0; monthIndex1 < 7; monthIndex1++ ) {\n            bindingOptions._currentView.monthCheckBoxes[ monthIndex1 ] = buildCheckBox( months1Container, _configuration.monthNames[ monthIndex1 ] ).input;\n        }\n\n        for ( let monthIndex2: number = 7; monthIndex2 < 12; monthIndex2++ ) {\n            bindingOptions._currentView.monthCheckBoxes[ monthIndex2 ] = buildCheckBox( months2Container, _configuration.monthNames[ monthIndex2 ] ).input;\n        }\n\n        addToolTip( closeButton, bindingOptions, _configuration.closeToolTipText );\n    }\n\n    function showConfigurationDialog( bindingOptions: BindingOptions ) : void {\n        showDisabledBackground( bindingOptions );\n\n        if ( isDefined( bindingOptions._currentView.configurationDialog ) && bindingOptions._currentView.configurationDialog.style.display !== \"block\" ) {\n            bindingOptions._currentView.configurationDialog.style.display = \"block\";\n        }\n\n        let daysToShow: number[] = [];\n        let monthsToShow: number[] = [];\n\n        if ( bindingOptions._currentView.view === VIEW_ID.map ) {\n            daysToShow = bindingOptions.views.map.daysToShow;\n            monthsToShow = bindingOptions.views.map.monthsToShow;\n        } else if ( bindingOptions.views.chart.enabled && bindingOptions._currentView.view === VIEW_ID.chart ) {\n            daysToShow = bindingOptions.views.chart.daysToShow;\n            monthsToShow = bindingOptions.views.chart.monthsToShow;\n        } else if ( bindingOptions.views.days.enabled && bindingOptions._currentView.view === VIEW_ID.days ) {\n            daysToShow = bindingOptions.views.days.daysToShow;\n            monthsToShow = bindingOptions.views.days.monthsToShow;\n        } else if ( bindingOptions.views.statistics.enabled && bindingOptions._currentView.view === VIEW_ID.statistics ) {\n            daysToShow = bindingOptions.views.statistics.daysToShow;\n            monthsToShow = bindingOptions.views.statistics.monthsToShow;\n        } else {\n            daysToShow = bindingOptions.views.map.daysToShow;\n            monthsToShow = bindingOptions.views.map.monthsToShow;\n        }\n\n        for ( let dayIndex: number = 0; dayIndex < 7; dayIndex++ ) {\n            bindingOptions._currentView.dayCheckBoxes[ dayIndex ].checked = isDayVisible( daysToShow, dayIndex + 1 );\n        }\n\n        for ( let monthIndex: number = 0; monthIndex < 12; monthIndex++ ) {\n            bindingOptions._currentView.monthCheckBoxes[ monthIndex ].checked = isMonthVisible( monthsToShow, monthIndex );\n        }\n\n        hideToolTip( bindingOptions );\n    }\n\n    function hideConfigurationDialog( bindingOptions: BindingOptions ) : void {\n        hideDisabledBackground( bindingOptions );\n\n        if ( isDefined( bindingOptions._currentView.configurationDialog ) && bindingOptions._currentView.configurationDialog.style.display !== \"none\" ) {\n            bindingOptions._currentView.configurationDialog.style.display = \"none\";\n        }\n\n        const daysChecked: number[] = [];\n        const monthsChecked: number[] = [];\n        let render: boolean = false;\n\n        for ( let dayIndex: number = 0; dayIndex < 7; dayIndex++ ) {\n            if ( bindingOptions._currentView.dayCheckBoxes[ dayIndex ].checked ) {\n                daysChecked.push( dayIndex + 1 );\n            }\n        }\n\n        for ( let monthIndex: number = 0; monthIndex < 12; monthIndex++ ) {\n            if ( bindingOptions._currentView.monthCheckBoxes[ monthIndex ].checked ) {\n                monthsChecked.push( monthIndex + 1 );\n            }\n        }\n\n        if ( daysChecked.length >= 1 ) {\n            if ( bindingOptions._currentView.view === VIEW_ID.map ) {\n                bindingOptions.views.map.daysToShow = daysChecked;\n            } else if ( bindingOptions.views.chart.enabled && bindingOptions._currentView.view === VIEW_ID.chart ) {\n                bindingOptions.views.chart.daysToShow = daysChecked;\n            } else if ( bindingOptions.views.days.enabled && bindingOptions._currentView.view === VIEW_ID.days ) {\n                bindingOptions.views.days.daysToShow = daysChecked;\n            } else if ( bindingOptions.views.statistics.enabled && bindingOptions._currentView.view === VIEW_ID.statistics ) {\n                bindingOptions.views.statistics.daysToShow = daysChecked;\n            } else {\n                bindingOptions.views.map.daysToShow = daysChecked;\n            }\n\n            render = true;\n        }\n\n        if ( monthsChecked.length >= 1 ) {\n            if ( bindingOptions._currentView.view === VIEW_ID.map ) {\n                bindingOptions.views.map.monthsToShow = monthsChecked;\n            } else if ( bindingOptions.views.chart.enabled && bindingOptions._currentView.view === VIEW_ID.chart ) {\n                bindingOptions.views.chart.monthsToShow = monthsChecked;\n            } else if ( bindingOptions.views.days.enabled && bindingOptions._currentView.view === VIEW_ID.days ) {\n                bindingOptions.views.days.monthsToShow = monthsChecked;\n            } else if ( bindingOptions.views.statistics.enabled && bindingOptions._currentView.view === VIEW_ID.statistics ) {\n                bindingOptions.views.statistics.monthsToShow = monthsChecked;\n            } else {\n                bindingOptions.views.map.monthsToShow = monthsChecked;\n            }\n\n            render = true;\n        }\n\n        if ( render ) {\n            renderControlContainer( bindingOptions );\n            fireCustomTriggerEvent( bindingOptions.events.onOptionsUpdate, bindingOptions._currentView.element, bindingOptions );\n            \n        } else {\n            hideToolTip( bindingOptions );\n        }\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Render:  ToolTip\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function renderControlToolTip( bindingOptions: BindingOptions ) : void {\n        if ( !isDefined( bindingOptions._currentView.tooltip ) ) {\n            bindingOptions._currentView.tooltip = createElement( documentObject.body, \"div\", \"heat-js-tooltip\" );\n            bindingOptions._currentView.tooltip.style.display = \"none\";\n    \n            assignToolTipEvents( bindingOptions );\n        }\n    }\n\n    function assignToolTipEvents( bindingOptions: BindingOptions, add: boolean = true ) : void {\n        let addEventListener_Window: Function = add ? windowObject.addEventListener : windowObject.removeEventListener;\n        let addEventListener_Document: Function = add ? documentObject.addEventListener : documentObject.removeEventListener;\n\n        addEventListener_Window( \"mousemove\", function() {\n            hideToolTip( bindingOptions );\n        } );\n\n        addEventListener_Document( \"scroll\", function() {\n            hideToolTip( bindingOptions );\n        } );\n    }\n\n    function addToolTip( element: HTMLElement, bindingOptions: BindingOptions, text: string ) : void {\n        if ( element !== null ) {\n            element.onmousemove = function( e ) {\n                showToolTip( e, bindingOptions, text );\n            };\n        }\n    }\n\n    function showToolTip( e: any, bindingOptions: BindingOptions, text: string ) : void {\n        cancelBubble( e );\n        hideToolTip( bindingOptions );\n\n        bindingOptions._currentView.tooltipTimer = setTimeout( function() {\n            bindingOptions._currentView.tooltip.innerHTML = text;\n            bindingOptions._currentView.tooltip.style.display = \"block\";\n\n            showElementAtMousePosition( e, bindingOptions._currentView.tooltip );\n        }, bindingOptions.tooltip.delay );\n    }\n\n    function hideToolTip( bindingOptions: BindingOptions ) : void {\n        if ( isDefined( bindingOptions._currentView.tooltip ) ) {\n            if ( isDefined( bindingOptions._currentView.tooltipTimer ) ) {\n                clearTimeout( bindingOptions._currentView.tooltipTimer );\n                bindingOptions._currentView.tooltipTimer = null;\n            }\n    \n            if ( bindingOptions._currentView.tooltip.style.display !== \"none\" ) {\n                bindingOptions._currentView.tooltip.style.display = \"none\";\n            }\n        }\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Render:  Title Bar\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function renderControlTitleBar( bindingOptions: BindingOptions ) : void {\n        if ( bindingOptions.title.showText || bindingOptions.title.showYearSelector || bindingOptions.title.showRefreshButton || bindingOptions.title.showExportButton || bindingOptions.title.showImportButton ) {\n            const titleBar: HTMLElement = createElement( bindingOptions._currentView.element, \"div\", \"title-bar\" );\n            const title: HTMLElement = createElement( titleBar, \"div\", \"title\" );\n\n            if ( bindingOptions.views.chart.enabled || bindingOptions.views.days.enabled || bindingOptions.views.statistics.enabled ) {\n                if ( bindingOptions.title.showTitleDropDownButton ) {\n                    createElement( title, \"div\", \"down-arrow\" );\n                }\n                \n            } else {\n                addClass( title, \"no-click\" );\n            }\n\n            if ( bindingOptions.title.showText ) {\n                title.innerHTML += bindingOptions.title.text;\n            }\n\n            if ( bindingOptions.views.chart.enabled || bindingOptions.views.days.enabled || bindingOptions.views.statistics.enabled ) {\n                renderTitleDropDownMenu( bindingOptions, title );\n            }\n\n            if ( bindingOptions.title.showImportButton && !bindingOptions._currentView.isInFetchMode ) {\n                const importData: HTMLElement = createElementWithHTML( titleBar, \"button\", \"import\", _configuration.importButtonText );\n        \n                importData.onclick = function() {\n                    importFromFilesSelected( bindingOptions );\n                };\n            }\n\n            if ( bindingOptions.title.showExportButton ) {\n                const exportData: HTMLElement = createElementWithHTML( titleBar, \"button\", \"export\", _configuration.exportButtonText );\n        \n                exportData.onclick = function() {\n                    exportAllData( bindingOptions );\n                };\n            }\n\n            if ( bindingOptions.title.showRefreshButton ) {\n                const refresh: HTMLElement = createElementWithHTML( titleBar, \"button\", \"refresh\", _configuration.refreshButtonText );\n        \n                refresh.onclick = function() {\n                    renderControlContainer( bindingOptions );\n                    fireCustomTriggerEvent( bindingOptions.events.onRefresh, bindingOptions._currentView.element );\n                };\n            }\n    \n            if ( bindingOptions.title.showYearSelector ) {\n                const back: any = createElementWithHTML( titleBar, \"button\", \"back\", _configuration.backButtonText );\n        \n                back.onclick = function() {\n                    moveToPreviousYear( bindingOptions );\n                };\n\n                if ( isFirstVisibleYear( bindingOptions, bindingOptions._currentView.year ) ) {\n                    back.disabled = true;\n                }\n\n                bindingOptions._currentView.yearText = createElementWithHTML( titleBar, \"div\", \"year-text\", bindingOptions._currentView.year.toString() );\n\n                if ( bindingOptions.title.showYearSelectionDropDown ) {\n                    renderYearDropDownMenu( bindingOptions );\n                } else {\n                    addClass( bindingOptions._currentView.yearText, \"no-click\" );\n                }\n\n                if ( bindingOptions.title.showConfigurationButton ) {\n                    let configureButton: HTMLElement = createElement( titleBar, \"div\", \"configure\" );\n\n                    addToolTip( configureButton, bindingOptions, _configuration.configurationToolTipText );\n\n                    configureButton.onclick = function() {\n                        showConfigurationDialog( bindingOptions );\n                    };\n                }\n\n                const next: any = createElementWithHTML( titleBar, \"button\", \"next\", _configuration.nextButtonText );\n\n                next.onclick = function() {\n                    moveToNextYear( bindingOptions );\n                };\n\n                if ( isLastVisibleYear( bindingOptions, bindingOptions._currentView.year ) ) {\n                    next.disabled = true;\n                }\n            }\n        }\n    }\n\n    function renderTitleDropDownMenu( bindingOptions: BindingOptions, title: HTMLElement ) : void {\n        const titlesMenuContainer: HTMLElement = createElement( title, \"div\", \"titles-menu-container\" );\n        const titlesMenu: HTMLElement = createElement( titlesMenuContainer, \"div\", \"titles-menu\" );\n        \n        if ( bindingOptions.title.showTitleDropDownHeaders ) {\n            createElementWithHTML( titlesMenu, \"div\", \"title-menu-header\", _configuration.dataText + STRING.colon );\n        }\n\n        const menuItemMap: HTMLElement = createElementWithHTML( titlesMenu, \"div\", \"title-menu-item\", _configuration.mapText );\n            \n        renderTitleDropDownMenuItemClickEvent( bindingOptions, menuItemMap, VIEW_ID.map, VIEW_NAME.map );\n\n        if ( bindingOptions.views.chart.enabled ) {\n            const menuItemChart = createElementWithHTML( titlesMenu, \"div\", \"title-menu-item\", _configuration.chartText );\n\n            renderTitleDropDownMenuItemClickEvent( bindingOptions, menuItemChart, VIEW_ID.chart, VIEW_NAME.chart );\n        }\n\n        if ( bindingOptions.views.days.enabled ) {\n            if ( bindingOptions.title.showTitleDropDownHeaders ) {\n                createElementWithHTML( titlesMenu, \"div\", \"title-menu-header\", _configuration.yearText + STRING.colon );\n            }\n\n            const menuItemDays: HTMLElement = createElementWithHTML( titlesMenu, \"div\", \"title-menu-item\", _configuration.daysText );\n\n            renderTitleDropDownMenuItemClickEvent( bindingOptions, menuItemDays, VIEW_ID.days, VIEW_NAME.days );\n        }\n\n        if ( bindingOptions.views.statistics.enabled ) {\n            if ( bindingOptions.title.showTitleDropDownHeaders ) {\n                createElementWithHTML( titlesMenu, \"div\", \"title-menu-header\", _configuration.statisticsText + STRING.colon );\n            }\n\n            const menuItemStatistics: HTMLElement = createElementWithHTML( titlesMenu, \"div\", \"title-menu-item\", _configuration.colorRangesText );\n\n            renderTitleDropDownMenuItemClickEvent( bindingOptions, menuItemStatistics, VIEW_ID.statistics, VIEW_NAME.statistics );\n        }\n    }\n\n    function renderTitleDropDownMenuItemClickEvent( bindingOptions: BindingOptions, option: HTMLElement, view: number, viewName: string ) : void {\n        if ( bindingOptions._currentView.view === view ) {\n            addClass( option, \"title-menu-item-active\" );\n            \n        } else {\n            option.onclick = function() {\n                bindingOptions._currentView.view = view;\n\n                fireCustomTriggerEvent( bindingOptions.events.onViewSwitch, viewName );\n                renderControlContainer( bindingOptions, false, true );\n            };\n        }\n    }\n\n    function renderYearDropDownMenu( bindingOptions: BindingOptions ) : void {\n        createElement( bindingOptions._currentView.yearText, \"div\", \"down-arrow\" );\n\n        const yearsMenuContainer: HTMLElement = createElement( bindingOptions._currentView.yearText, \"div\", \"years-menu-container\" );\n        const yearsMenu: HTMLElement = createElement( yearsMenuContainer, \"div\", \"years-menu\" );\n        const thisYear: number = new Date().getFullYear();\n        let activeYearMenuItem: HTMLElement = null;\n\n        yearsMenuContainer.style.display = \"block\";\n        yearsMenuContainer.style.visibility = \"hidden\";\n\n        for ( let currentYear: number = thisYear - bindingOptions.title.extraSelectionYears; currentYear < thisYear + bindingOptions.title.extraSelectionYears; currentYear++ ) {\n            if ( isYearVisible( bindingOptions, currentYear ) ) {\n                let yearMenuItem: HTMLElement = renderYearDropDownMenuItem( bindingOptions, yearsMenu, currentYear, thisYear );\n\n                if ( !isDefined( activeYearMenuItem ) ) {\n                    activeYearMenuItem = yearMenuItem;\n                }\n            }\n        }\n\n        if ( isDefined( activeYearMenuItem ) ) {\n            yearsMenu.scrollTop = activeYearMenuItem.offsetTop - ( yearsMenu.offsetHeight / 2 );\n        }\n\n        yearsMenuContainer.style.display = \"none\";\n        yearsMenuContainer.style.visibility = \"visible\";\n    }\n\n    function renderYearDropDownMenuItem( bindingOptions: BindingOptions, years: HTMLElement, currentYear: number, actualYear: number ) : HTMLElement {\n        let result: HTMLElement = null;\n        const year: HTMLElement = createElementWithHTML( years, \"div\", \"year-menu-item\", currentYear.toString() );\n\n        if ( bindingOptions._currentView.year !== currentYear ) {\n            year.onclick = function() {\n                bindingOptions._currentView.year = currentYear;\n    \n                renderControlContainer( bindingOptions );\n                fireCustomTriggerEvent( bindingOptions.events.onSetYear, bindingOptions._currentView.year );\n            };\n\n            if ( currentYear === actualYear ) {\n                addClass( year, \"year-menu-item-current\" );\n            }\n\n        } else {\n            addClass( year, \"year-menu-item-active\" );\n            result = year;\n        }\n\n        return result;\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Render:  View:  Map\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function renderControlMap( bindingOptions: BindingOptions, isForViewSwitch: boolean ) : void {\n        bindingOptions._currentView.mapContents = createElement( bindingOptions._currentView.element, \"div\", \"map-contents\" );\n\n        if ( bindingOptions.views.chart.enabled ) {\n            renderControlChartContents( bindingOptions );\n        }\n\n        if ( bindingOptions.views.days.enabled ) {\n            renderControlDaysContents( bindingOptions );\n        }\n        \n        if ( bindingOptions.views.statistics.enabled ) {\n            renderControlStatisticsContents( bindingOptions );\n        }\n\n        renderControlViewGuide( bindingOptions );\n\n        if ( bindingOptions.views.map.showNoDataMessageWhenDataIsNotAvailable && !isDataAvailableForYear( bindingOptions ) ) {\n            const noDataMessage: HTMLElement = createElementWithHTML( bindingOptions._currentView.mapContents, \"div\", \"no-data-message\", _configuration.noMapDataMessage );\n\n            if ( isForViewSwitch ) {\n                addClass( noDataMessage, \"view-switch\" );\n            }\n\n        } else {\n            bindingOptions._currentView.mapContents.style.minHeight = \"unset\";\n\n            makeAreaDroppable( bindingOptions._currentView.mapContents, bindingOptions );\n\n            const map: HTMLElement = createElement( bindingOptions._currentView.mapContents, \"div\", \"map\" );\n            const currentYear: number = bindingOptions._currentView.year;\n            let monthAdded: boolean = false;\n    \n            if ( isForViewSwitch ) {\n                addClass( map, \"view-switch\" );\n            }\n    \n            if ( bindingOptions.views.map.showDayNames ) {\n                const days: HTMLElement = createElement( map, \"div\", \"days\" );\n                const showMinimalDays: boolean = bindingOptions.views.map.showMinimalDayNames && bindingOptions.views.map.daysToShow.length === 7;\n    \n                if ( !bindingOptions.views.map.showMonthNames || bindingOptions.views.map.placeMonthNamesOnTheBottom ) {\n                    days.className = \"days-months-bottom\";\n                }\n        \n                for ( let dayNameIndex: number = 0; dayNameIndex < 7; dayNameIndex++ ) {\n                    if ( isDayVisible( bindingOptions.views.map.daysToShow, dayNameIndex + 1 ) ) {\n                        const dayText: string = !showMinimalDays || dayNameIndex % 3 === 0 ? _configuration.dayNames[ dayNameIndex ] : STRING.space;\n\n                        createElementWithHTML( days, \"div\", \"day-name\", dayText );\n                    }\n                }\n    \n                if ( bindingOptions.views.map.showDaysInReverseOrder ) {\n                    reverseElementsOrder( days );\n                }\n            }\n    \n            const months: HTMLElement = createElement( map, \"div\", \"months\" );\n            const colorRanges: ColorRange[] = getSortedColorRanges( bindingOptions );\n    \n            for ( let monthIndex: number = 0; monthIndex < 12; monthIndex++ ) {\n                if ( isMonthVisible( bindingOptions.views.map.monthsToShow, monthIndex ) ) {\n                    const month: HTMLElement = createElement( months, \"div\", \"month\" );\n                    const dayColumns: HTMLElement = createElement( month, \"div\", \"day-columns\" );\n                    let totalDaysInMonth: number = getTotalDaysInMonth( currentYear, monthIndex );\n                    let currentDayColumn: HTMLElement = createElement( dayColumns, \"div\", \"day-column\" );\n                    let startFillingDays: boolean = false;\n                    const firstDayInMonth: Date = new Date( currentYear, monthIndex, 1 );\n                    const firstDayNumberInMonth: number = getWeekdayNumber( firstDayInMonth );\n                    let actualDay: number = 1;\n        \n                    totalDaysInMonth += firstDayNumberInMonth;\n        \n                    for ( let dayIndex: number = 0; dayIndex < totalDaysInMonth; dayIndex++ ) {\n                        if ( dayIndex >= firstDayNumberInMonth ) {\n                            startFillingDays = true;\n        \n                        } else {\n                            if ( isDayVisible( bindingOptions.views.map.daysToShow, actualDay ) ) {\n                                createElement( currentDayColumn, \"div\", \"day-disabled\" );\n                            }\n                        }\n        \n                        if ( startFillingDays ) {\n                            let day: HTMLElement = null;\n    \n                            if ( isDayVisible( bindingOptions.views.map.daysToShow, actualDay ) ) {\n                                day = renderControlMapMonthDay( bindingOptions, currentDayColumn, dayIndex - firstDayNumberInMonth, monthIndex, currentYear, colorRanges );\n                            }\n            \n                            if ( ( dayIndex + 1 ) % 7 === 0 ) {\n                                if ( bindingOptions.views.map.showDaysInReverseOrder ) {\n                                    reverseElementsOrder( currentDayColumn );\n                                }\n    \n                                currentDayColumn = createElement( dayColumns, \"div\", \"day-column\" );\n                                actualDay = 0;\n    \n                                if ( !isDefined( _elements_Day_Width ) && isDefined( day ) ) {\n                                    let marginLeft: number = getStyleValueByName( day, \"margin-left\", true );\n                                    let marginRight: number = getStyleValueByName( day, \"margin-right\", true );\n                                    \n                                    _elements_Day_Width = day.offsetWidth + marginLeft + marginRight;\n                                }\n                            }\n                        }\n    \n                        actualDay++;\n                    }\n    \n                    if ( bindingOptions.views.map.showMonthNames ) {\n                        let monthName: HTMLElement = null;\n                        const monthWidth: number = month.offsetWidth;\n    \n                        if ( !bindingOptions.views.map.placeMonthNamesOnTheBottom ) {\n                            monthName = createElementWithHTML( month, \"div\", \"month-name\", _configuration.monthNames[ monthIndex ], dayColumns );\n                        } else {\n                            monthName = createElementWithHTML( month, \"div\", \"month-name-bottom\", _configuration.monthNames[ monthIndex ] );\n                        }\n    \n                        if ( isDefined( monthName ) ) {\n                            if ( bindingOptions.views.map.showMonthDayGaps ) {\n                                monthName.style.width = monthWidth + \"px\";\n                            } else {\n                                monthName.style.width = ( monthWidth - _elements_Day_Width ) + \"px\";\n                            }\n                        }\n                    }\n    \n                    if ( monthAdded && isDefined( _elements_Day_Width ) ) {\n                        if ( firstDayNumberInMonth > 0 && !bindingOptions.views.map.showMonthDayGaps ) {\n                            month.style.marginLeft = -_elements_Day_Width + \"px\";\n                        } else if ( firstDayNumberInMonth === 0 && bindingOptions.views.map.showMonthDayGaps ) {\n                            month.style.marginLeft = _elements_Day_Width + \"px\";\n                        }\n                    }\n\n                    if ( bindingOptions.views.map.showMonthsInReverseOrder ) {\n                        reverseElementsOrder( dayColumns );\n                    }\n    \n                    monthAdded = true;\n                }\n            }\n\n            if ( bindingOptions.views.map.showMonthsInReverseOrder ) {\n                reverseElementsOrder( months );\n            }\n            \n            if ( bindingOptions.views.map.keepScrollPositions ) {\n                bindingOptions._currentView.mapContents.scrollLeft = bindingOptions._currentView.mapContentsScrollLeft;\n            }\n        }\n    }\n\n    function renderControlMapMonthDay( bindingOptions: BindingOptions, currentDayColumn: HTMLElement, dayNumber: number, month: number, year: number, colorRanges: ColorRange[] ) : HTMLElement {\n        const actualDay: number = dayNumber + 1;\n        const day: HTMLElement = createElement( currentDayColumn, \"div\", \"day\" );\n        const date: Date = new Date( year, month, actualDay );\n        let dateCount: number = _elements_DateCounts[ bindingOptions._currentView.element.id ].type[ bindingOptions._currentView.type ][ toStorageDate( date ) ];\n\n        dateCount = getDefaultNumber( dateCount, 0 );\n\n        renderDayToolTip( bindingOptions, day, date, dateCount );\n\n        if ( bindingOptions.views.map.showDayNumbers && dateCount > 0 ) {\n            day.innerHTML = dateCount.toString();\n        }\n\n        if ( isDefinedFunction( bindingOptions.events.onDayClick ) ) {\n            day.onclick = function() {\n                fireCustomTriggerEvent( bindingOptions.events.onDayClick, date, dateCount );\n            };\n\n        } else {\n            addClass( day, \"no-hover\" );\n        }\n\n        const useColorRange: ColorRange = getColorRange( bindingOptions, colorRanges, dateCount, date );\n\n        if ( isDefined( useColorRange ) && isColorRangeVisible( bindingOptions, useColorRange.id ) ) {\n            if ( isDefinedString( useColorRange.mapCssClassName ) ) {\n                addClass( day, useColorRange.mapCssClassName );\n            } else {\n                addClass( day, useColorRange.cssClassName );\n            }\n        }\n\n        return day;\n    }\n\n    function isDataAvailableForYear( bindingOptions: BindingOptions ) : boolean {\n        let result: boolean = false;\n        const data: any = getCurrentViewData( bindingOptions );\n        const checkDate: string = bindingOptions._currentView.year.toString();\n\n        for ( let storageDate in data ) {\n            if ( data.hasOwnProperty( storageDate ) ) {\n                if ( getStorageDateYear( storageDate ) === checkDate ) {\n                    result = true;\n                    break;\n                }\n            }\n        }\n\n        return result;\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Render:  View:  Chart\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function renderControlChartContents( bindingOptions: BindingOptions ) {\n        bindingOptions._currentView.chartContents = createElement( bindingOptions._currentView.element, \"div\", \"chart-contents\" );\n\n        makeAreaDroppable( bindingOptions._currentView.chartContents, bindingOptions );\n    }\n\n    function renderControlChart( bindingOptions: BindingOptions, isForViewSwitch: boolean) : void {\n        const chart: HTMLElement = createElement( bindingOptions._currentView.chartContents, \"div\", \"chart\" );\n        let labels: HTMLElement = createElement( chart, \"div\", \"y-labels\" );\n        const dayLines: HTMLElement = createElement( chart, \"div\", \"day-lines\" );\n        const colorRanges: ColorRange[] = getSortedColorRanges( bindingOptions );\n        const largestValueForCurrentYear: number = getLargestValueForChartYear( bindingOptions );\n        const currentYear: number = bindingOptions._currentView.year;\n        let labelsWidth: number = 0;\n\n        if ( isForViewSwitch ) {\n            addClass( chart, \"view-switch\" );\n        }\n\n        if ( largestValueForCurrentYear > 0 && bindingOptions.views.chart.showChartYLabels ) {\n            const topLabel: HTMLElement = createElementWithHTML( labels, \"div\", \"label-0\", largestValueForCurrentYear.toString() );\n\n            createElementWithHTML( labels, \"div\", \"label-25\", ( mathObject.floor( largestValueForCurrentYear / 4 ) * 3 ).toString() );\n            createElementWithHTML( labels, \"div\", \"label-50\", mathObject.floor( largestValueForCurrentYear / 2 ).toString() );\n            createElementWithHTML( labels, \"div\", \"label-75\", mathObject.floor( largestValueForCurrentYear / 4 ).toString() );\n            createElementWithHTML( labels, \"div\", \"label-100\", STRING.zero );\n\n            labels.style.width = topLabel.offsetWidth + \"px\";\n            labelsWidth = labels.offsetWidth + getStyleValueByName( labels, \"margin-right\", true );\n\n        } else {\n            labels.parentNode.removeChild( labels );\n            labels = null;\n        }\n\n        if ( largestValueForCurrentYear === 0 ) {\n            bindingOptions._currentView.chartContents.style.minHeight = bindingOptions._currentView.mapContents.offsetHeight + \"px\";\n            chart.parentNode.removeChild( chart );\n\n            const noDataMessage: HTMLElement = createElementWithHTML( bindingOptions._currentView.chartContents, \"div\", \"no-data-message\", _configuration.noChartDataMessage );\n\n            if ( isForViewSwitch ) {\n                addClass( noDataMessage, \"view-switch\" );\n            }\n\n        } else {\n            const pixelsPerNumbers: number = bindingOptions._currentView.mapContents.offsetHeight / largestValueForCurrentYear;\n            let totalMonths: number = 0;\n            let totalDays: number = 0;\n\n            for ( let monthIndex1: number = 0; monthIndex1 < 12; monthIndex1++ ) {\n                if ( isMonthVisible( bindingOptions.views.chart.monthsToShow, monthIndex1 ) ) {\n                    const totalDaysInMonth: number = getTotalDaysInMonth( currentYear, monthIndex1 );\n                    let actualDay: number = 1;\n                    \n                    totalMonths++;\n\n                    for ( let dayIndex: number = 0; dayIndex < totalDaysInMonth; dayIndex++ ) {\n                        if ( isDayVisible( bindingOptions.views.chart.daysToShow, actualDay ) ) {\n                            renderControlChartDay( dayLines, bindingOptions, dayIndex + 1, monthIndex1, currentYear, colorRanges, pixelsPerNumbers );\n                        }\n        \n                        if ( ( dayIndex + 1 ) % 7 === 0 ) {\n                            actualDay = 0;\n                        }\n    \n                        actualDay++;\n                        totalDays++;\n                    }\n                }\n            }\n\n            if ( bindingOptions.views.chart.showInReverseOrder ) {\n                reverseElementsOrder( dayLines );\n            }\n\n            if ( bindingOptions.views.chart.showMonthNames ) {\n                const chartMonths: HTMLElement = createElement( bindingOptions._currentView.chartContents, \"div\", \"chart-months\" );\n                const linesWidth: number = dayLines.offsetWidth / totalMonths;\n                let monthTimesValue: number = 0;\n\n                const addMonthName: Function = function( addMonthNameIndex: number ) {\n                    if ( isMonthVisible( bindingOptions.views.chart.monthsToShow, addMonthNameIndex ) ) {\n                        let monthName: HTMLElement = createElementWithHTML( chartMonths, \"div\", \"month-name\", _configuration.monthNames[ addMonthNameIndex ] );\n                        monthName.style.left = labelsWidth + ( linesWidth * monthTimesValue ) + \"px\";\n\n                        monthTimesValue++;\n                    }\n                };\n\n                if ( bindingOptions.views.chart.showInReverseOrder ) {\n                    for ( let monthIndex2: number = 12; monthIndex2--; ) {\n                        addMonthName( monthIndex2 );\n                    }\n                } else {\n                    for ( let monthIndex3: number = 0; monthIndex3 < 12; monthIndex3++ ) {\n                        addMonthName( monthIndex3 );\n                    }\n                }\n\n                chartMonths.style.width = dayLines.offsetWidth + \"px\";\n\n                const monthNameSpace: HTMLElement = createElement( chartMonths, \"div\", \"month-name-space\" );\n                monthNameSpace.style.height = chartMonths.offsetHeight + \"px\";\n                monthNameSpace.style.width = labelsWidth + \"px\";\n            }\n    \n            if ( bindingOptions.views.chart.keepScrollPositions ) {\n                bindingOptions._currentView.chartContents.scrollLeft = bindingOptions._currentView.chartContentsScrollLeft;\n            }\n        }\n    }\n\n    function renderControlChartDay( dayLines: HTMLElement, bindingOptions: BindingOptions, day: number, month: number, year: number, colorRanges: ColorRange[], pixelsPerNumbers: number ) : void {\n        const date: Date = new Date( year, month, day );\n        const dayLine: HTMLElement = createElement( dayLines, \"div\", \"day-line\" );\n        let dateCount: number = getCurrentViewData( bindingOptions )[ toStorageDate( date ) ];\n\n        dateCount = getDefaultNumber( dateCount, 0 );\n\n        renderDayToolTip( bindingOptions, dayLine, date, dateCount );\n\n        if ( bindingOptions.views.chart.showLineNumbers && dateCount > 0 ) {\n            addClass( dayLine, \"day-line-number\" );\n\n            dayLine.innerHTML = dateCount.toString();\n        }\n\n        const dayLineHeight: number = dateCount * pixelsPerNumbers;\n        dayLine.style.height = dayLineHeight + \"px\";\n\n        if ( dayLineHeight <= 0 ) {\n            dayLine.style.visibility = \"hidden\";\n        }\n\n        if ( isDefinedFunction( bindingOptions.events.onDayClick ) ) {\n            dayLine.onclick = function() {\n                fireCustomTriggerEvent( bindingOptions.events.onDayClick, date, dateCount );\n            };\n\n        } else {\n            addClass( dayLine, \"no-hover\" );\n        }\n\n        const useColorRange: ColorRange = getColorRange( bindingOptions, colorRanges, dateCount, date );\n\n        if ( isDefined( useColorRange ) && isColorRangeVisible( bindingOptions, useColorRange.id ) ) {\n            if ( isDefinedString( useColorRange.chartCssClassName ) ) {\n                addClass( dayLine, useColorRange.chartCssClassName );\n            } else {\n                addClass( dayLine, useColorRange.cssClassName );\n            }\n        }\n    }\n\n    function getLargestValueForChartYear( bindingOptions: BindingOptions ) : number {\n        let result: number = 0;\n        const data: any = getCurrentViewData( bindingOptions );\n\n        for ( let monthIndex: number = 0; monthIndex < 12; monthIndex++ ) {\n            const totalDaysInMonth: number = getTotalDaysInMonth( bindingOptions._currentView.year, monthIndex );\n    \n            for ( let dayIndex: number = 0; dayIndex < totalDaysInMonth; dayIndex++ ) {\n                const storageDate: string = toStorageDate( new Date( bindingOptions._currentView.year, monthIndex, dayIndex + 1 ) );\n\n                if ( data.hasOwnProperty( storageDate ) ) {\n                    if ( isMonthVisible( bindingOptions.views.chart.monthsToShow, monthIndex ) && isDayVisible( bindingOptions.views.chart.daysToShow, dayIndex + 1 ) ) {\n                        result = mathObject.max( result, parseInt( data[ storageDate ] ) );\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Render:  View:  Days\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function renderControlDaysContents( bindingOptions: BindingOptions ) : void {\n        bindingOptions._currentView.daysContents = createElement( bindingOptions._currentView.element, \"div\", \"days-contents\" );\n\n        makeAreaDroppable( bindingOptions._currentView.daysContents, bindingOptions );\n    }\n\n    function renderControlDays( bindingOptions: BindingOptions, isForViewSwitch: boolean ) : void {\n        const days: HTMLElement = createElement( bindingOptions._currentView.daysContents, \"div\", \"days\" );\n        const dayNames: HTMLElement = createElement( bindingOptions._currentView.daysContents, \"div\", \"day-names\" );\n        let labels: HTMLElement = createElement( days, \"div\", \"y-labels\" );\n        const dayLines: HTMLElement = createElement( days, \"div\", \"day-lines\" );\n        const dayValuesForCurrentYear: any = getLargestValuesForEachDay( bindingOptions );\n\n        if ( isForViewSwitch ) {\n            addClass( days, \"view-switch\" );\n        }\n\n        if ( dayValuesForCurrentYear.largestValue > 0 && bindingOptions.views.days.showChartYLabels ) {\n            const topLabel: HTMLElement = createElementWithHTML( labels, \"div\", \"label-0\", dayValuesForCurrentYear.largestValue.toString() );\n\n            createElementWithHTML( labels, \"div\", \"label-25\", ( mathObject.floor( dayValuesForCurrentYear.largestValue / 4 ) * 3 ).toString() );\n            createElementWithHTML( labels, \"div\", \"label-50\", mathObject.floor( dayValuesForCurrentYear.largestValue / 2 ).toString() );\n            createElementWithHTML( labels, \"div\", \"label-75\", mathObject.floor( dayValuesForCurrentYear.largestValue / 4 ).toString() );\n            createElementWithHTML( labels, \"div\", \"label-100\", STRING.zero );\n\n            labels.style.width = topLabel.offsetWidth + \"px\";\n            dayNames.style.paddingLeft = labels.offsetWidth + getStyleValueByName( labels, \"margin-right\", true ) + \"px\";\n\n        } else {\n            labels.parentNode.removeChild( labels );\n            labels = null;\n        }\n\n        if ( dayValuesForCurrentYear.largestValue === 0 ) {\n            bindingOptions._currentView.daysContents.style.minHeight = bindingOptions._currentView.mapContents.offsetHeight + \"px\";\n            days.parentNode.removeChild( days );\n            dayNames.parentNode.removeChild( dayNames );\n\n            const noDataMessage: HTMLElement = createElementWithHTML( bindingOptions._currentView.daysContents, \"div\", \"no-days-message\", _configuration.noDaysDataMessage );\n\n            if ( isForViewSwitch ) {\n                addClass( noDataMessage, \"view-switch\" );\n            }\n\n        } else {\n            const pixelsPerNumbers: number = bindingOptions._currentView.mapContents.offsetHeight / dayValuesForCurrentYear.largestValue;\n\n            for ( let day in dayValuesForCurrentYear.days ) {\n                if ( dayValuesForCurrentYear.days.hasOwnProperty( day ) && isDayVisible( bindingOptions.views.days.daysToShow, parseInt( day ) ) ) {\n                    renderControlDaysDayLine( dayLines, parseInt( day ), dayValuesForCurrentYear.days[ day ], bindingOptions, pixelsPerNumbers );\n\n                    if ( bindingOptions.views.days.showDayNames ) {\n                        createElementWithHTML( dayNames, \"div\", \"day-name\", _configuration.dayNames[ parseInt( day ) - 1 ] );\n                    }\n                }\n            }\n\n            if ( bindingOptions.views.days.showInReverseOrder ) {\n                reverseElementsOrder( dayLines );\n                reverseElementsOrder( dayNames );\n            }\n\n            if ( bindingOptions.views.days.keepScrollPositions ) {\n                bindingOptions._currentView.daysContents.scrollLeft = bindingOptions._currentView.daysContentsScrollLeft;\n            }\n        }\n    }\n\n    function renderControlDaysDayLine( dayLines: HTMLElement, dayNumber: number, dayCount: number, bindingOptions: BindingOptions, pixelsPerNumbers: number ) : void {\n        const dayLine: HTMLElement = createElement( dayLines, \"div\", \"day-line\" );\n        const dayLineHeight: number = dayCount * pixelsPerNumbers;\n\n        dayLine.style.height = dayLineHeight + \"px\";\n\n        if ( dayLineHeight <= 0 ) {\n            dayLine.style.visibility = \"hidden\";\n        }\n        \n        addToolTip( dayLine, bindingOptions, dayCount.toString() );\n\n        if ( isDefinedFunction( bindingOptions.events.onWeekDayClick ) ) {\n            dayLine.onclick = function() {\n                fireCustomTriggerEvent( bindingOptions.events.onWeekDayClick, dayNumber, dayCount );\n            };\n\n        } else {\n            addClass( dayLine, \"no-hover\" );\n        }\n\n        if ( bindingOptions.views.days.showDayNumbers && dayCount > 0 ) {\n            addClass( dayLine, \"day-line-number\" );\n\n            createElementWithHTML( dayLine, \"div\", \"count\", dayCount.toString() );\n        }\n    }\n\n    function getLargestValuesForEachDay( bindingOptions: BindingOptions ) : any {\n        let largestValue: number = 0;\n        const data: any = getCurrentViewData( bindingOptions );\n\n        const days : object = {\n            1: 0,\n            2: 0,\n            3: 0,\n            4: 0,\n            5: 0,\n            6: 0,\n            7: 0,\n        };\n\n        for ( let monthIndex: number = 0; monthIndex < 12; monthIndex++ ) {\n            const totalDaysInMonth: number = getTotalDaysInMonth( bindingOptions._currentView.year, monthIndex );\n    \n            for ( let dayIndex: number = 0; dayIndex < totalDaysInMonth; dayIndex++ ) {\n                const storageDate: string = toStorageDate( new Date( bindingOptions._currentView.year, monthIndex, dayIndex + 1 ) );\n\n                if ( data.hasOwnProperty( storageDate ) ) {\n                    const storageDateParts: string[] = getStorageDate( storageDate );\n                    const storageDateObject: Date = new Date( parseInt( storageDateParts[ 2 ] ), parseInt( storageDateParts[ 1 ] ), parseInt( storageDateParts[ 0 ] ) );\n                    const weekDayNumber: number = getWeekdayNumber( storageDateObject ) + 1;\n\n                    if ( !isHoliday( bindingOptions, storageDateObject ).matched && isMonthVisible( bindingOptions.views.days.monthsToShow, storageDateObject.getMonth() ) && isDayVisible( bindingOptions.views.days.daysToShow, weekDayNumber ) ) {\n                        days[ weekDayNumber ] += data[ storageDate ];\n\n                        largestValue = mathObject.max( largestValue, days[ weekDayNumber ] );\n                    }\n                }\n            }\n        }\n\n        return {\n            days: days,\n            largestValue: largestValue\n        };\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Render:  View:  Statistics\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function renderControlStatisticsContents( bindingOptions: BindingOptions ) : void {\n        bindingOptions._currentView.statisticsContents = createElement( bindingOptions._currentView.element, \"div\", \"statistics-contents\" );\n\n        makeAreaDroppable( bindingOptions._currentView.statisticsContents, bindingOptions );\n    }\n\n    function renderControlStatistics( bindingOptions: BindingOptions, isForViewSwitch: boolean ) : void {\n        const statistics: HTMLElement = createElement( bindingOptions._currentView.statisticsContents, \"div\", \"statistics\" );\n        const statisticsRanges: HTMLElement = createElement( bindingOptions._currentView.statisticsContents, \"div\", \"statistics-ranges\" );\n        let labels: HTMLElement = createElement( statistics, \"div\", \"y-labels\" );\n        const rangeLines: HTMLElement = createElement( statistics, \"div\", \"range-lines\" );\n        const colorRanges: ColorRange[] = getSortedColorRanges( bindingOptions );\n        const colorRangeValuesForCurrentYear = getLargestValuesForEachRangeType( bindingOptions, colorRanges );\n\n        if ( isForViewSwitch ) {\n            addClass( statistics, \"view-switch\" );\n        }\n\n        if ( colorRangeValuesForCurrentYear.largestValue > 0 && bindingOptions.views.statistics.showChartYLabels ) {\n            const topLabel: HTMLElement = createElementWithHTML( labels, \"div\", \"label-0\", colorRangeValuesForCurrentYear.largestValue.toString() );\n\n            createElementWithHTML( labels, \"div\", \"label-25\", ( mathObject.floor( colorRangeValuesForCurrentYear.largestValue / 4 ) * 3 ).toString() );\n            createElementWithHTML( labels, \"div\", \"label-50\", mathObject.floor( colorRangeValuesForCurrentYear.largestValue / 2 ).toString() );\n            createElementWithHTML( labels, \"div\", \"label-75\", mathObject.floor( colorRangeValuesForCurrentYear.largestValue / 4 ).toString() );\n            createElementWithHTML( labels, \"div\", \"label-100\", STRING.zero );\n\n            labels.style.width = topLabel.offsetWidth + \"px\";\n            statisticsRanges.style.paddingLeft = labels.offsetWidth + getStyleValueByName( labels, \"margin-right\", true ) + \"px\";\n\n        } else {\n            labels.parentNode.removeChild( labels );\n            labels = null;\n        }\n\n        if ( colorRangeValuesForCurrentYear.largestValue === 0 ) {\n            bindingOptions._currentView.statisticsContents.style.minHeight = bindingOptions._currentView.mapContents.offsetHeight + \"px\";\n            statistics.parentNode.removeChild( statistics );\n            statisticsRanges.parentNode.removeChild( statisticsRanges );\n\n            const noDataMessage: HTMLElement = createElementWithHTML( bindingOptions._currentView.statisticsContents, \"div\", \"no-statistics-message\", _configuration.noStatisticsDataMessage );\n\n            if ( isForViewSwitch ) {\n                addClass( noDataMessage, \"view-switch\" );\n            }\n\n        } else {\n            const pixelsPerNumbers: number = bindingOptions._currentView.mapContents.offsetHeight / colorRangeValuesForCurrentYear.largestValue;\n\n            if ( !bindingOptions.views.statistics.showColorRangeLabels ) {\n                statisticsRanges.parentNode.removeChild( statisticsRanges );\n            }\n\n            for ( let type in colorRangeValuesForCurrentYear.types ) {\n                if ( colorRangeValuesForCurrentYear.types.hasOwnProperty( type ) ) {\n                    renderControlStatisticsRangeLine( parseInt( type ), rangeLines, colorRangeValuesForCurrentYear.types[ type ], bindingOptions, colorRanges, pixelsPerNumbers );\n\n                    const useColorRange: ColorRange = getColorRangeByMinimum( colorRanges, parseInt( type ) );\n\n                    if ( bindingOptions.views.statistics.showColorRangeLabels ) {\n                        if ( !bindingOptions.views.statistics.useColorRangeNamesForLabels || !isDefined( useColorRange ) || !isDefinedString( useColorRange.name ) ) {\n                            createElementWithHTML( statisticsRanges, \"div\", \"range-name\", type + STRING.plus );\n                        } else {\n                            createElementWithHTML( statisticsRanges, \"div\", \"range-name\", useColorRange.name );\n                        }\n                    }\n                }\n            }\n\n            if ( bindingOptions.views.statistics.showInReverseOrder ) {\n                reverseElementsOrder( rangeLines );\n                reverseElementsOrder( statisticsRanges );\n            }\n    \n            if ( bindingOptions.views.statistics.keepScrollPositions ) {\n                bindingOptions._currentView.statisticsContents.scrollLeft = bindingOptions._currentView.statisticsContentsScrollLeft;\n            }\n        }\n    }\n\n    function renderControlStatisticsRangeLine( colorRangeMinimum: number, dayLines: HTMLElement, rangeCount: number, bindingOptions: BindingOptions, colorRanges: ColorRange[], pixelsPerNumbers: number ) : void {\n        const rangeLine: HTMLElement = createElement( dayLines, \"div\", \"range-line\" );\n        const useColorRange: ColorRange = getColorRangeByMinimum( colorRanges, colorRangeMinimum );\n        const rangeLineHeight: number = rangeCount * pixelsPerNumbers;\n\n        rangeLine.style.height = rangeLineHeight + \"px\";\n\n        if ( rangeLineHeight <= 0 ) {\n            rangeLine.style.visibility = \"hidden\";\n        }\n        \n        addToolTip( rangeLine, bindingOptions, rangeCount.toString() );\n\n        if ( bindingOptions.views.statistics.showRangeNumbers && rangeCount > 0 ) {\n            addClass( rangeLine, \"range-line-number\" );\n\n            createElementWithHTML( rangeLine, \"div\", \"count\", rangeCount.toString() );\n        }\n\n        if ( isDefinedFunction( bindingOptions.events.onStatisticClick ) ) {\n            rangeLine.onclick = function() {\n                fireCustomTriggerEvent( bindingOptions.events.onStatisticClick, useColorRange );\n            };\n\n        } else {\n            addClass( rangeLine, \"no-hover\" );\n        }\n\n        if ( isDefined( useColorRange ) && isColorRangeVisible( bindingOptions, useColorRange.id ) ) {\n            if ( isDefinedString( useColorRange.statisticsCssClassName ) ) {\n                addClass( rangeLine, useColorRange.statisticsCssClassName );\n            } else {\n                addClass( rangeLine, useColorRange.cssClassName );\n            }\n        }\n    }\n\n    function getLargestValuesForEachRangeType( bindingOptions: BindingOptions, colorRanges: ColorRange[] ) : any {\n        const types: object = {};\n        const data: any = getCurrentViewData( bindingOptions );\n        let largestValue: number = 0;\n\n        types[ STRING.zero ] = 0;\n\n        for ( let monthIndex: number = 0; monthIndex < 12; monthIndex++ ) {\n            const totalDaysInMonth: number = getTotalDaysInMonth( bindingOptions._currentView.year, monthIndex );\n    \n            for ( let dayIndex: number = 0; dayIndex < totalDaysInMonth; dayIndex++ ) {\n                const storageDate: string = toStorageDate( new Date( bindingOptions._currentView.year, monthIndex, dayIndex + 1 ) );\n\n                if ( data.hasOwnProperty( storageDate ) ) {\n                    const storageDateParts: string[] = getStorageDate( storageDate );\n                    const storageDateObject: Date = new Date( parseInt( storageDateParts[ 2 ] ), parseInt( storageDateParts[ 1 ] ), parseInt( storageDateParts[ 0 ] ) );\n                    const weekDayNumber: number = getWeekdayNumber( storageDateObject ) + 1;\n\n                    if ( !isHoliday( bindingOptions, storageDateObject ).matched && isMonthVisible( bindingOptions.views.statistics.monthsToShow, storageDateObject.getMonth() ) && isDayVisible( bindingOptions.views.statistics.daysToShow, weekDayNumber ) ) {\n                        const useColorRange: ColorRange = getColorRange( bindingOptions, colorRanges, data[ storageDate ] );\n\n                        if ( !isDefined( useColorRange ) ) {\n                            types[ STRING.zero ]++;\n    \n                        } else {\n                            if ( !types.hasOwnProperty( useColorRange.minimum.toString() ) ) {\n                                types[ useColorRange.minimum.toString() ] = 0;\n                            }\n    \n                            types[ useColorRange.minimum ]++;\n                            \n                            largestValue = mathObject.max( largestValue, types[ useColorRange.minimum ] );\n                        }\n                    }\n                }\n            }\n        }\n\n        return {\n            types: types,\n            largestValue: largestValue\n        };\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Render:  Guide\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function renderControlViewGuide( bindingOptions: BindingOptions ) : void {\n        const guide: HTMLElement = createElement( bindingOptions._currentView.element, \"div\", \"guide\" )\n        const mapTypes: HTMLElement = createElement( guide, \"div\", \"map-types\" );\n        let noneTypeCount: number = 0;\n\n        for ( let storageDate in _elements_DateCounts[ bindingOptions._currentView.element.id ].type[ _configuration.unknownTrendText ] ) {\n            if ( _elements_DateCounts[ bindingOptions._currentView.element.id ].type[ _configuration.unknownTrendText ].hasOwnProperty( storageDate ) ) {\n                noneTypeCount++;\n                break;\n            }\n        }\n\n        if ( _elements_DateCounts[ bindingOptions._currentView.element.id ].types > 1 ) {\n            if ( isDefinedString( bindingOptions.description.text ) ) {\n                const description: HTMLElement = createElement( bindingOptions._currentView.element, \"div\", \"description\", guide );\n    \n                renderDescription( bindingOptions, description );\n            }\n\n            for ( let type in _elements_DateCounts[ bindingOptions._currentView.element.id ].type ) {\n                if ( type !== _configuration.unknownTrendText || noneTypeCount > 0 ) {\n                    if ( noneTypeCount === 0 && bindingOptions._currentView.type === _configuration.unknownTrendText ) {\n                        bindingOptions._currentView.type = type;\n                    }\n\n                    renderControlViewGuideTypeButton( bindingOptions, mapTypes, type );\n                }\n            }\n\n        } else {\n            renderDescription( bindingOptions, mapTypes );\n        }\n\n        if ( bindingOptions.guide.enabled ) {\n            const mapToggles: HTMLElement = createElement( guide, \"div\", \"map-toggles\" );\n\n            if ( bindingOptions.guide.showLessAndMoreLabels ) {\n                let lessText: HTMLElement = createElementWithHTML( mapToggles, \"div\", \"less-text\", _configuration.lessText );\n    \n                if ( bindingOptions.guide.colorRangeTogglesEnabled ) {\n                    lessText.onclick = function() {\n                        updateColorRangeToggles( bindingOptions, false );\n                    };\n        \n                } else {\n                    addClass( lessText, \"no-click\" );\n                }\n            }\n    \n            const days: HTMLElement = createElement( mapToggles, \"div\", \"days\" );\n            const colorRanges: ColorRange[] = getSortedColorRanges( bindingOptions );\n            const colorRangesLength: number = colorRanges.length;\n    \n            for ( let colorRangesIndex: number = 0; colorRangesIndex < colorRangesLength; colorRangesIndex++ ) {\n                renderControlViewGuideDay( bindingOptions, days, colorRanges[ colorRangesIndex ] );\n            }\n\n            if ( bindingOptions.guide.showLessAndMoreLabels ) {\n                const moreText: HTMLElement = createElementWithHTML( mapToggles, \"div\", \"more-text\", _configuration.moreText );\n    \n                if ( bindingOptions.guide.colorRangeTogglesEnabled ) {\n                    moreText.onclick = function() {\n                        updateColorRangeToggles( bindingOptions, true );\n                    };\n        \n                } else {\n                    addClass( moreText, \"no-click\" );\n                }\n            }\n        }\n    }\n\n    function renderControlViewGuideTypeButton( bindingOptions: BindingOptions, mapTypes: HTMLElement, type: string ) : void {\n        const typeButton: HTMLElement = createElementWithHTML( mapTypes, \"button\", \"type\", type );\n\n        if ( bindingOptions._currentView.type === type ) {\n            addClass( typeButton, \"active\" );\n        }\n\n        typeButton.onclick = function() {\n            if ( bindingOptions._currentView.type !== type ) {\n                bindingOptions._currentView.type = type;\n\n                fireCustomTriggerEvent( bindingOptions.events.onTypeSwitch, type );\n                renderControlContainer( bindingOptions );\n            }\n        };\n    }\n\n    function renderControlViewGuideDay( bindingOptions: BindingOptions, days: HTMLElement, colorRange: ColorRange ) : void {\n        const day: HTMLElement = createElement( days, \"div\" );\n        day.className = \"day\";\n\n        addToolTip( day, bindingOptions, colorRange.tooltipText );\n\n        if ( isColorRangeVisible( bindingOptions, colorRange.id ) ) {\n            if ( bindingOptions._currentView.view === VIEW_ID.map && isDefinedString( colorRange.mapCssClassName ) ) {\n                addClass( day, colorRange.mapCssClassName );\n            } else if ( bindingOptions.views.chart.enabled && bindingOptions._currentView.view === VIEW_ID.chart && isDefinedString( colorRange.chartCssClassName ) ) {\n                addClass( day, colorRange.chartCssClassName );\n            } else if ( bindingOptions.views.statistics.enabled && bindingOptions._currentView.view === VIEW_ID.statistics && isDefinedString( colorRange.statisticsCssClassName ) ) {\n                addClass( day, colorRange.statisticsCssClassName );\n            } else {\n                addClass( day, colorRange.cssClassName );\n            }   \n        }\n\n        if ( bindingOptions.guide.showNumbersInGuide ) {\n            addClass( day, \"day-number\" );\n\n            day.innerHTML = colorRange.minimum + STRING.plus;\n        }\n\n        if ( bindingOptions.guide.colorRangeTogglesEnabled ) {\n            day.onclick = function() {\n                toggleColorRangeVisibleState( bindingOptions, colorRange.id );\n            };\n\n        } else {\n            addClass( day, \"no-hover\" );\n        }\n    }\n\n    function renderDescription( bindingOptions: BindingOptions, container: HTMLElement ) : void {\n        if ( isDefinedString( bindingOptions.description.text ) ) {\n            if ( isDefinedString( bindingOptions.description.url ) ) {\n                const link: any = createElementWithHTML( container, \"a\", \"label\", bindingOptions.description.text );\n                link.href = bindingOptions.description.url;\n                link.target = bindingOptions.description.urlTarget;                \n\n            } else {\n                createElementWithHTML( container, \"span\", \"label\", bindingOptions.description.text );\n            }\n        }\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Render:  Shared\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function renderDayToolTip( bindingOptions: BindingOptions, day: HTMLElement, date: Date, dateCount: number ) : void {\n        if ( isDefinedFunction( bindingOptions.events.onDayToolTipRender ) ) {\n            addToolTip( day, bindingOptions, fireCustomTriggerEvent( bindingOptions.events.onDayToolTipRender, date, dateCount ) );\n        } else {\n\n            let tooltip: string = getCustomFormattedDateText( bindingOptions.tooltip.dayText, date );\n\n            if ( bindingOptions.showHolidaysInDayToolTips ) {\n                let holiday: any = isHoliday( bindingOptions, date );\n\n                if ( holiday.matched && isDefinedString( holiday.name ) ) {\n                    tooltip += STRING.colon + STRING.space + holiday.name;\n                }\n            }\n\n            addToolTip( day, bindingOptions, tooltip );\n        }\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Data\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function createDateStorageForElement( elementId: string, bindingOptions: BindingOptions, storeLocalData: boolean = true ) {\n        _elements_DateCounts[ elementId ] = {\n            options: bindingOptions,\n            type: {},\n            types: 1\n        };\n\n        _elements_DateCounts[ elementId ].type[ _configuration.unknownTrendText ] = {};\n\n        if ( storeLocalData && !bindingOptions._currentView.isInFetchMode ) {\n            loadDataFromLocalStorage( bindingOptions );\n        }\n    }\n\n    function getCurrentViewData( bindingOptions: BindingOptions ) : any {\n        return _elements_DateCounts[ bindingOptions._currentView.element.id ].type[ bindingOptions._currentView.type ];\n    }\n\n    function isMonthVisible( monthsToShow: number[], month: number ) : boolean {\n        return monthsToShow.indexOf( month + 1 ) > VALUE.notFound;\n    }\n\n    function isDayVisible( daysToShow: number[], day: number ) : boolean {\n        return daysToShow.indexOf( day ) > VALUE.notFound;\n    }\n\n    function getYearsAvailableInData( bindingOptions: BindingOptions ) : number[] {\n        let years: number[] = [];\n\n        if ( bindingOptions.showOnlyDataForYearsAvailable ) {\n            let data: any = getCurrentViewData( bindingOptions );\n\n            for ( let storageDate in data ) {\n                if ( data.hasOwnProperty( storageDate ) ) {\n                    let year: number = parseInt( getStorageDateYear( storageDate ) );\n                    \n                    if ( years.indexOf( year ) === VALUE.notFound ) {\n                        years.push( year );\n                    }\n                }\n            }\n        }\n\n        years = years.sort( function( a, b ) {\n            return a - b;\n        } );\n\n        return years;\n    }\n\n    function isYearVisible( bindingOptions: BindingOptions, year: number ) : boolean {\n        return bindingOptions.yearsToHide.indexOf( year ) === VALUE.notFound && ( bindingOptions._currentView.yearsAvailable.length === 0 || bindingOptions._currentView.yearsAvailable.indexOf( year ) > VALUE.notFound );\n    }\n\n    function isFirstVisibleYear( bindingOptions: BindingOptions, year: number ) : boolean {\n        return bindingOptions._currentView.yearsAvailable.length > 0 && year <= bindingOptions._currentView.yearsAvailable[ 0 ];\n    }\n\n    function isLastVisibleYear( bindingOptions: BindingOptions, year: number ) : boolean {\n        return bindingOptions._currentView.yearsAvailable.length > 0 && year >= bindingOptions._currentView.yearsAvailable[ bindingOptions._currentView.yearsAvailable.length - 1 ];\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Local Storage\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function loadDataFromLocalStorage( bindingOptions: BindingOptions ) : void {\n        if ( bindingOptions.useLocalStorageForData && windowObject.localStorage ) {\n            const keysLength: number = windowObject.localStorage.length;\n            const elementId: string = bindingOptions._currentView.element.id;\n\n            for ( let keyIndex: number = 0; keyIndex < keysLength; keyIndex++ ) {\n                const key : string = windowObject.localStorage.key( keyIndex );\n\n                if ( startsWithAnyCase( key, _local_Storage_Start_ID ) ) {\n                    const typesJson: string = windowObject.localStorage.getItem( key );\n                    const typesObject: any = getObjectFromString( typesJson );\n\n                    if ( typesObject.parsed ) {\n                        _elements_DateCounts[ elementId ].type = typesObject.result;\n                        _elements_DateCounts[ elementId ].types = 0;\n\n                        for ( let type in _elements_DateCounts[ elementId ].type ) {\n                            if ( _elements_DateCounts[ elementId ].type.hasOwnProperty( type ) ) {\n                                _elements_DateCounts[ elementId ].types++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    function storeDataInLocalStorage( bindingOptions: BindingOptions ) : void {\n        if ( bindingOptions.useLocalStorageForData && windowObject.localStorage ) {\n            const elementId: string = bindingOptions._currentView.element.id;\n\n            clearLocalStorageObjects( bindingOptions );\n\n            const jsonData: string = jsonObject.stringify( _elements_DateCounts[ elementId ].type );\n\n            windowObject.localStorage.setItem( _local_Storage_Start_ID + elementId, jsonData );\n        }\n    }\n\n    function clearLocalStorageObjects( bindingOptions: BindingOptions ) : void {\n        if ( bindingOptions.useLocalStorageForData && windowObject.localStorage ) {\n            const keysLength: number = windowObject.localStorage.length;\n            const keysToRemove: string[] = [];\n            const elementId: string = bindingOptions._currentView.element.id;\n\n            for ( let keyIndex: number = 0; keyIndex < keysLength; keyIndex++ ) {\n                if ( startsWithAnyCase( windowObject.localStorage.key( keyIndex ), _local_Storage_Start_ID + elementId ) ) {\n                    keysToRemove.push( windowObject.localStorage.key( keyIndex ) );\n                }\n            }\n\n            const keysToRemoveLength: number = keysToRemove.length;\n\n            for ( let keyToRemoveIndex: number = 0; keyToRemoveIndex < keysToRemoveLength; keyToRemoveIndex++ ) {\n                windowObject.localStorage.removeItem( keysToRemove[ keyToRemoveIndex ] );\n            }\n        }\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Data Pulling\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function startDataPullTimer( bindingOptions: BindingOptions ) : void {\n        if ( bindingOptions._currentView.isInFetchMode ) {\n            if ( !isDefined( bindingOptions._currentView.isInFetchModeTimer ) ) {\n                pullDataFromCustomTrigger( bindingOptions );\n            }\n\n            if ( !isDefined( bindingOptions._currentView.isInFetchModeTimer ) ) {\n                bindingOptions._currentView.isInFetchModeTimer = setInterval( function() {\n                    pullDataFromCustomTrigger( bindingOptions );\n                    renderControlContainer( bindingOptions );\n                }, bindingOptions.dataFetchDelay );\n            }\n        }\n    }\n\n    function pullDataFromCustomTrigger( bindingOptions: BindingOptions ) : void {\n        const elementId: string = bindingOptions._currentView.element.id;\n        const data: any = fireCustomTriggerEvent( bindingOptions.events.onDataFetch, elementId );\n\n        if ( isDefinedObject( data ) ) {\n            createDateStorageForElement( elementId, bindingOptions, false );\n\n            for ( let storageDate in data ) {\n                if ( data.hasOwnProperty( storageDate ) ) {\n                    if ( !_elements_DateCounts[ elementId ].type[ _configuration.unknownTrendText ].hasOwnProperty( storageDate ) ) {\n                        _elements_DateCounts[ elementId ].type[ _configuration.unknownTrendText ][ storageDate ] = 0;\n                    }\n            \n                    _elements_DateCounts[ elementId ].type[ _configuration.unknownTrendText ][ storageDate ] += data[ storageDate ];\n                }\n            }\n        }\n    }\n\n    function cancelAllPullDataTimers() : void {\n        for ( let elementId in _elements_DateCounts ) {\n            if ( _elements_DateCounts.hasOwnProperty( elementId ) ) {\n                const bindingOptions: BindingOptions = _elements_DateCounts[ elementId ].options;\n\n                if ( isDefined( bindingOptions._currentView.isInFetchModeTimer ) ) {\n                    clearInterval( bindingOptions._currentView.isInFetchModeTimer );\n                }\n            }\n        }\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Color Ranges\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function isColorRangeVisible( bindingOptions: BindingOptions, id: string ) : boolean {\n        let result: boolean = false;\n        \n        if ( id === _internal_Name_Holiday ) {\n            result = true;\n\n        } else {\n            const colorRangesLength : number = bindingOptions.colorRanges.length;\n\n            for ( let colorRangesIndex: number = 0; colorRangesIndex < colorRangesLength; colorRangesIndex++ ) {\n                const colorRange: ColorRange = bindingOptions.colorRanges[ colorRangesIndex ];\n    \n                if ( colorRange.id === id && getDefaultBoolean( colorRange.visible, true ) ) {\n                    result = true;\n                    break;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    function updateColorRangeToggles( bindingOptions: BindingOptions, flag: boolean ) : void {\n        const colorRangesLength: number = bindingOptions.colorRanges.length;\n\n        for ( let colorRangesIndex: number = 0; colorRangesIndex < colorRangesLength; colorRangesIndex++ ) {\n            bindingOptions.colorRanges[ colorRangesIndex ].visible = flag;\n\n            fireCustomTriggerEvent( bindingOptions.events.onColorRangeTypeToggle, bindingOptions.colorRanges[ colorRangesIndex ].id, flag );\n        }\n\n        renderControlContainer( bindingOptions );\n    }\n\n    function toggleColorRangeVisibleState( bindingOptions: BindingOptions, id: string ) : void {\n        const colorRangesLength: number = bindingOptions.colorRanges.length;\n\n        for ( let colorRangesIndex: number = 0; colorRangesIndex < colorRangesLength; colorRangesIndex++ ) {\n            const colorRange: ColorRange = bindingOptions.colorRanges[ colorRangesIndex ];\n\n            if ( colorRange.id === id ) {\n                colorRange.visible = !getDefaultBoolean( colorRange.visible, true );\n\n                fireCustomTriggerEvent( bindingOptions.events.onColorRangeTypeToggle, colorRange.id, colorRange.visible );\n                renderControlContainer( bindingOptions );\n                break;\n            }\n        }\n    }\n\n    function getColorRange( bindingOptions: BindingOptions, colorRanges: ColorRange[], dateCount: number, date: Date = null ) : ColorRange {\n        let useColorRange: ColorRange = null;\n\n        if ( isDefined( date ) && isHoliday( bindingOptions, date ).matched ) {\n            const newUseColorRange: ColorRange = {\n                cssClassName: \"holiday\",\n                id: _internal_Name_Holiday,\n                visible: true,\n                name: STRING.empty,\n                minimum: 0,\n                mapCssClassName: STRING.empty,\n                chartCssClassName: STRING.empty,\n                statisticsCssClassName: STRING.empty,\n                tooltipText: STRING.empty\n            };\n\n            useColorRange = newUseColorRange;\n        }\n\n        if ( !isDefined( useColorRange ) ) {\n            const colorRangesLength: number = colorRanges.length;\n\n            for ( let colorRangesIndex: number = 0; colorRangesIndex < colorRangesLength; colorRangesIndex++ ) {\n                const colorRange: ColorRange = colorRanges[ colorRangesIndex ];\n    \n                if ( dateCount >= colorRange.minimum ) {\n                    useColorRange = colorRange;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        return useColorRange;\n    }\n\n    function getColorRangeByMinimum( colorRanges: ColorRange[], minimum: number ) : ColorRange {\n        const colorRangesLength: number = colorRanges.length;\n        let useColorRange: ColorRange = null;\n\n        for ( let colorRangesIndex: number = 0; colorRangesIndex < colorRangesLength; colorRangesIndex++ ) {\n            const colorRange: ColorRange = colorRanges[ colorRangesIndex ];\n\n            if ( minimum.toString() === colorRange.minimum.toString() ) {\n                useColorRange = colorRange;\n                break;\n            }\n        }\n\n        return useColorRange;\n    }\n\n    function getSortedColorRanges( bindingOptions: BindingOptions ) {\n        return bindingOptions.colorRanges.sort( function( a, b ) {\n            return a.minimum - b.minimum;\n        } );\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Holiday\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function isHoliday( bindingOptions: BindingOptions, date: Date ) : any {\n        const holidaysLength: number = bindingOptions.holidays.length;\n        const day: number = date.getDate();\n        const month: number = date.getMonth() + 1;\n        const year: number = date.getFullYear();\n        let holidayMatched: boolean = false;\n        let holidayName: string = null;\n        \n        for ( let holidayIndex: number = 0; holidayIndex < holidaysLength; holidayIndex++ ) {\n            let holiday: Holiday = bindingOptions.holidays[ holidayIndex ];\n\n            if ( isDefinedString( holiday.date ) && holiday.showInViews ) {\n                const dateParts: string[] = holiday.date.split( \"/\" );\n\n                if ( dateParts.length === 2 ) {\n                    holidayMatched = day === parseInt( dateParts[ 0 ] ) && month === parseInt( dateParts[ 1 ] );\n                } else if ( dateParts.length === 3 ) {\n                    holidayMatched = day === parseInt( dateParts[ 0 ] ) && month === parseInt( dateParts[ 1 ] ) && year === parseInt( dateParts[ 2 ] );\n                }\n\n                if ( holidayMatched ) {\n                    holidayName = holiday.name;\n                    break;\n                }\n            }\n        }\n\n        return {\n            matched: holidayMatched,\n            name: holidayName\n        };\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Import\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function makeAreaDroppable( element: HTMLElement, bindingOptions: BindingOptions ) : void {\n        if ( bindingOptions.allowFileImports && !bindingOptions._currentView.isInFetchMode ) {\n            element.ondragover = cancelBubble;\n            element.ondragenter = cancelBubble;\n            element.ondragleave = cancelBubble;\n    \n            element.ondrop = function( e ) {\n                cancelBubble( e );\n    \n                if ( isDefined( windowObject.FileReader ) && e.dataTransfer.files.length > 0 ) {\n                    importFromFiles( e.dataTransfer.files, bindingOptions );\n                }\n            };\n        }\n    }\n\n    function importFromFilesSelected( bindingOptions: BindingOptions ) : void {\n        const input: any = createElementWithNoContainer( \"input\" );\n        input.type = \"file\";\n        input.accept = \".json, .txt, .csv\";\n        input.multiple = \"multiple\";\n\n        input.onchange = function() {\n            importFromFiles( input.files, bindingOptions );\n        };\n\n        input.click();\n    }\n\n    function importFromFiles( files: FileList, bindingOptions: BindingOptions ) : void {\n        const filesLength: number = files.length;\n        const filesCompleted: string[] = [];\n        const data: any = getCurrentViewData( bindingOptions );\n\n        const onLoadEnd = function( filename: string, readingObject: object ) {\n            filesCompleted.push( filename );\n\n            for ( let storageDate in readingObject ) {\n                if ( readingObject.hasOwnProperty( storageDate ) ) {\n                    if ( !data.hasOwnProperty( storageDate ) ) {\n                        data[ storageDate ] = 0;\n                    }\n\n                    data[ storageDate ] += readingObject[ storageDate ];\n                }\n            }\n            \n            if ( filesCompleted.length === filesLength ) {\n                fireCustomTriggerEvent( bindingOptions.events.onImport, bindingOptions._currentView.element );\n                renderControlContainer( bindingOptions );\n            }\n        };\n\n        for ( let fileIndex: number = 0; fileIndex < filesLength; fileIndex++ ) {\n            const file: File = files[ fileIndex ];\n            const fileExtension: string = file.name.split( \".\" ).pop().toLowerCase();\n\n            if ( fileExtension === EXPORT_TYPE.json ) {\n                importFromJson( file, onLoadEnd );\n            } else if ( fileExtension === EXPORT_TYPE.txt ) {\n                importFromTxt( file, onLoadEnd );\n            } else if ( fileExtension === EXPORT_TYPE.csv ) {\n                importFromCsv( file, onLoadEnd );\n            }\n        }\n    }\n\n    function importFromJson( file: File, onLoadEnd: Function ) : void {\n        const reader: FileReader = new FileReader();\n        let readingObject: object = null;\n\n        reader.readAsText( file );\n\n        reader.onloadend = function() {\n            onLoadEnd( file.name, readingObject );\n        };\n    \n        reader.onload = function( e ) {\n            const jsonObject: any = getObjectFromString( e.target.result );\n\n            if ( jsonObject.parsed && isDefinedObject( jsonObject.result ) ) {\n                readingObject = jsonObject.result;\n            }\n        };\n    }\n\n    function importFromTxt( file: File, onLoadEnd: Function ) : void {\n        const reader: FileReader = new FileReader();\n        const readingObject: object = null;\n\n        reader.readAsText( file );\n\n        reader.onloadend = function() {\n            onLoadEnd( file.name, readingObject );\n        };\n    \n        reader.onload = function( e ) {\n            const lines: string[] = e.target.result.toString().split( STRING.newLine );\n            const linesLength: number = lines.length;\n\n            for ( let lineIndex: number = 0; lineIndex < linesLength; lineIndex++ ) {\n                const line: string[] = lines[ lineIndex ].split( STRING.colon );\n\n                readingObject[ line[ 0 ].trim() ] = parseInt( line[ 1 ].trim() );\n            }\n        };\n    }\n\n    function importFromCsv( file: File, onLoadEnd: Function ) : void {\n        const reader: FileReader = new FileReader();\n        const readingObject: object = null;\n\n        reader.readAsText( file );\n\n        reader.onloadend = function() {\n            onLoadEnd( file.name, readingObject );\n        };\n    \n        reader.onload = function( e ) {\n            const data: string = e.target.result.toString().replace( new RegExp( \"\\\"\", \"g\" ), STRING.empty );\n            const lines: string[] = data.split( STRING.newLine );\n            \n            lines.shift();\n\n            const linesLength: number = lines.length;\n\n            for ( let lineIndex: number = 0; lineIndex < linesLength; lineIndex++ ) {\n                let line: string[] = lines[ lineIndex ].split( STRING.comma );\n\n                readingObject[ line[ 0 ].trim() ] = parseInt( line[ 1 ].trim() );\n            }\n        };\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Export\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function exportAllData( bindingOptions: BindingOptions, exportType: string = null ) : void {\n        let contents: string = null;\n        const contentsMimeType: string = getExportMimeType( bindingOptions );\n        const contentExportType: string = getDefaultString( exportType, bindingOptions.exportType ).toLowerCase();\n\n        if ( contentExportType === EXPORT_TYPE.csv ) {\n            contents = getCsvContent( bindingOptions );\n        } else if ( contentExportType === EXPORT_TYPE.json ) {\n            contents = getJsonContent( bindingOptions );\n        } else if ( contentExportType === EXPORT_TYPE.xml ) {\n            contents = getXmlContents( bindingOptions );\n        } else if ( contentExportType === EXPORT_TYPE.txt ) {\n            contents = getTxtContents( bindingOptions );\n        }\n\n        if ( isDefinedString( contents ) ) {\n            const tempLink: HTMLElement = createElement( documentObject.body, \"a\" );\n            tempLink.style.display = \"none\";\n            tempLink.setAttribute( \"target\", \"_blank\" );\n            tempLink.setAttribute( \"href\", \"data:\" + contentsMimeType + \";charset=utf-8,\" + encodeURIComponent( contents ) );\n            tempLink.setAttribute( \"download\", getExportFilename( bindingOptions ) );\n            tempLink.click();\n            \n            documentObject.body.removeChild( tempLink );\n\n            fireCustomTriggerEvent( bindingOptions.events.onExport, bindingOptions._currentView.element );\n        }\n    }\n\n    function getCsvContent( bindingOptions: BindingOptions ) : string {\n        const data: object = getExportData( bindingOptions );\n        const csvContents: string[] = [];\n\n        for ( let storageDate in data ) {\n            if ( data.hasOwnProperty( storageDate ) ) {\n                csvContents.push( getCsvValueLine( [ getCsvValue( storageDate ), getCsvValue( data[ storageDate ] ) ] ) );\n            }\n        }\n\n        if ( csvContents.length > 0 ) {\n            csvContents.unshift( getCsvValueLine( [ getCsvValue( _configuration.dateText ), getCsvValue( _configuration.countText ) ] ) );\n        }\n        \n        return csvContents.join( STRING.newLine );\n    }\n\n    function getJsonContent( bindingOptions: BindingOptions ) : string {\n        return jsonObject.stringify( getExportData( bindingOptions ) );\n    }\n\n    function getXmlContents( bindingOptions: BindingOptions ) : string {\n        const data: object = getExportData( bindingOptions );\n        const contents: string[] = [];\n\n        contents.push( \"<?xml version=\\\"1.0\\\" ?>\" );\n        contents.push( \"<Dates>\" );\n\n        for ( let storageDate in data ) {\n            if ( data.hasOwnProperty( storageDate ) ) {\n                contents.push( \"<Date>\" );\n                contents.push( \"<FullDate>\" + storageDate + \"</FullDate>\" );\n                contents.push( \"<Count>\" + data[ storageDate ] + \"</Count>\" );\n                contents.push( \"</Date>\" );\n            }\n        }\n\n        contents.push( \"</Dates>\" );\n\n        return contents.join( STRING.newLine );\n    }\n\n    function getTxtContents( bindingOptions: BindingOptions ) : string {\n        const data: object = getExportData( bindingOptions );\n        const contents: string[] = [];\n\n        for ( let storageDate in data ) {\n            if ( data.hasOwnProperty( storageDate ) ) {\n                contents.push( storageDate + STRING.colon + STRING.space + data[ storageDate ].toString() );\n            }\n        }\n\n        return contents.join( STRING.newLine );\n    }\n\n    function getExportData( bindingOptions: BindingOptions ) : object {\n        const contents: object = {};\n        const data = getCurrentViewData( bindingOptions );\n\n        if ( bindingOptions.exportOnlyYearBeingViewed ) {\n            for ( let monthIndex: number = 0; monthIndex < 12; monthIndex++ ) {\n                const totalDaysInMonth: number = getTotalDaysInMonth( bindingOptions._currentView.year, monthIndex );\n        \n                for ( let dayIndex: number = 0; dayIndex < totalDaysInMonth; dayIndex++ ) {\n                    const storageDate2: string = toStorageDate( new Date( bindingOptions._currentView.year, monthIndex, dayIndex + 1 ) );\n\n                    if ( data.hasOwnProperty( storageDate2 ) ) {\n                        contents[ storageDate2 ] = data[ storageDate2 ];\n                    }\n                }\n            }\n\n        } else {\n            const storageDates: string[] = [];\n\n            for ( let storageDate1 in data ) {\n                if ( data.hasOwnProperty( storageDate1 ) ) {\n                    storageDates.push( storageDate1 );\n                }\n            }\n    \n            storageDates.sort();\n\n            const storageDatesLength: number = storageDates.length;\n\n            for ( let storageDateIndex: number = 0; storageDateIndex < storageDatesLength; storageDateIndex++ ) {\n                const storageDate3: string = storageDates[ storageDateIndex ];\n    \n                if ( data.hasOwnProperty( storageDate3 ) ) {\n                    contents[ storageDate3 ] = data[ storageDate3 ];\n                }\n            }\n        }\n\n        return contents;\n    }\n\n    function getExportMimeType( bindingOptions: BindingOptions ) : string {\n        let result: string = null;\n\n        if ( bindingOptions.exportType.toLowerCase() === EXPORT_TYPE.csv ) {\n            result = \"text/csv\";\n        } else if ( bindingOptions.exportType.toLowerCase() === EXPORT_TYPE.json ) {\n            result = \"application/json\";\n        } else if ( bindingOptions.exportType.toLowerCase() === EXPORT_TYPE.xml ) {\n            result = \"application/xml\";\n        } else if ( bindingOptions.exportType.toLowerCase() === EXPORT_TYPE.txt ) {\n            result = \"text/plain\";\n        }\n\n        return result;\n    }\n\n    function getExportFilename( bindingOptions: BindingOptions ) : string {\n        const date: Date = new Date();\n        const datePart: string = padNumber( date.getDate() ) + STRING.dash + padNumber( date.getMonth() + 1 ) + STRING.dash + date.getFullYear();\n        const timePart: string = padNumber( date.getHours() ) + STRING.dash + padNumber( date.getMinutes() );\n        let filenameStart: string = STRING.empty;\n\n        if ( bindingOptions._currentView.type !== _configuration.unknownTrendText ) {\n            filenameStart = bindingOptions._currentView.type.toLowerCase().replace( STRING.space, STRING.underscore ) + STRING.underscore;\n        }\n\n        return filenameStart + datePart + STRING.underscore + timePart + \".\" + bindingOptions.exportType.toLowerCase();\n    }\n\n    function getCsvValue( text: string ) : string {\n        let result: string = text.toString().replace( /(\\r\\n|\\n|\\r)/gm, STRING.empty ).replace( /(\\s\\s)/gm, STRING.space );\n        result = result.replace( /\"/g, '\"\"' );\n        result = '\"' + result + '\"';\n\n        return result;\n    }\n\n    function getCsvValueLine( csvValues: string[] ) : string {\n        return csvValues.join( \",\" );\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Attribute Options\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function buildAttributeOptions( newOptions: any ) : BindingOptions {\n        let options: BindingOptions = getDefaultObject( newOptions, {} as BindingOptions );\n        options.views = getDefaultObject( options.views, {} );\n        options.exportOnlyYearBeingViewed = getDefaultBoolean( options.exportOnlyYearBeingViewed, true );\n        options.year = getDefaultNumber( options.year, new Date().getFullYear() );\n        options.view = getDefaultString( options.view, VIEW_NAME.map );\n        options.exportType = getDefaultString( options.exportType, EXPORT_TYPE.csv );\n        options.useLocalStorageForData = getDefaultBoolean( options.useLocalStorageForData, false );\n        options.allowFileImports = getDefaultBoolean( options.allowFileImports, true );\n        options.yearsToHide = getDefaultArray( options.yearsToHide, [] );\n        options.dataFetchDelay = getDefaultNumber( options.dataFetchDelay, 60000 );\n        options.showOnlyDataForYearsAvailable = getDefaultBoolean( options.showOnlyDataForYearsAvailable, false );\n        options.showHolidaysInDayToolTips = getDefaultBoolean( options.showHolidaysInDayToolTips, false );\n        \n        options = buildAttributeOptionColorRanges( options );\n        options = buildAttributeOptionHolidays( options );\n        options = buildAttributeOptionTitle( options );\n        options = buildAttributeOptionDescription( options );\n        options = buildAttributeOptionGuide( options );\n        options = buildAttributeOptionToolTip( options );\n        options = buildAttributeOptionMapView( options );\n        options = buildAttributeOptionChartView( options );\n        options = buildAttributeOptionDaysView( options );\n        options = buildAttributeOptionStatisticsView( options );\n        options = buildAttributeOptionCustomTriggers( options );\n        \n        return options;\n    }\n\n    function buildAttributeOptionColorRanges( options: BindingOptions ) : BindingOptions {\n        if ( isDefinedArray( options.colorRanges ) ) {\n            const colorRangesLength: number = options.colorRanges.length;\n\n            for ( let colorRangeIndex: number = 0; colorRangeIndex < colorRangesLength; colorRangeIndex++ ) {\n                const colorRange: ColorRange = options.colorRanges[ colorRangeIndex ];\n\n                colorRange.id = getDefaultString( colorRange.id, newGuid() );\n                colorRange.name = getDefaultString( colorRange.name, null );\n                colorRange.minimum = getDefaultNumber( colorRange.minimum, 0 );\n                colorRange.cssClassName = getDefaultString( colorRange.cssClassName, null );\n                colorRange.mapCssClassName = getDefaultString( colorRange.mapCssClassName, null );\n                colorRange.chartCssClassName = getDefaultString( colorRange.chartCssClassName, null );\n                colorRange.statisticsCssClassName = getDefaultString( colorRange.statisticsCssClassName, null );\n                colorRange.tooltipText = getDefaultString( colorRange.tooltipText, null );\n                colorRange.visible = getDefaultBoolean( colorRange.visible, true );\n            }\n\n        } else {\n            options.colorRanges = [\n                {\n                    id: newGuid(),\n                    name: \"Day Color 1\",\n                    minimum: 10,\n                    cssClassName: \"day-color-1\",\n                    tooltipText: \"Day Color 1\",\n                    visible: true,\n                    mapCssClassName: STRING.empty,\n                    chartCssClassName: STRING.empty,\n                    statisticsCssClassName: STRING.empty\n                },\n                {\n                    id: newGuid(),\n                    name: \"Day Color 2\",\n                    minimum: 15,\n                    cssClassName: \"day-color-2\",\n                    tooltipText: \"Day Color 2\",\n                    visible: true,\n                    mapCssClassName: STRING.empty,\n                    chartCssClassName: STRING.empty,\n                    statisticsCssClassName: STRING.empty\n                },\n                {\n                    id: newGuid(),\n                    name: \"Day Color 3\",\n                    minimum: 20,\n                    cssClassName: \"day-color-3\",\n                    tooltipText: \"Day Color 3\",\n                    visible: true,\n                    mapCssClassName: STRING.empty,\n                    chartCssClassName: STRING.empty,\n                    statisticsCssClassName: STRING.empty\n                },\n                {\n                    id: newGuid(),\n                    name: \"Day Color 4\",\n                    minimum: 25,\n                    cssClassName: \"day-color-4\",\n                    tooltipText: \"Day Color 4\",\n                    visible: true,\n                    mapCssClassName: STRING.empty,\n                    chartCssClassName: STRING.empty,\n                    statisticsCssClassName: STRING.empty\n                }\n            ];\n        }\n\n        return options;\n    }\n\n    function buildAttributeOptionHolidays( options: BindingOptions ) : BindingOptions {\n        if ( isDefinedArray( options.holidays ) ) {\n            const holidaysLength: number = options.holidays.length;\n\n            for ( let holidayIndex: number = 0; holidayIndex < holidaysLength; holidayIndex++ ) {\n                const holiday: Holiday = options.holidays[ holidayIndex ];\n                \n                holiday.date = getDefaultString( holiday.date, null );\n                holiday.name = getDefaultString( holiday.name, null );\n                holiday.showInViews = getDefaultBoolean( holiday.showInViews, true );\n            }\n\n        } else {\n            options.holidays = [];\n        }\n\n        return options;\n    }\n\n    function buildAttributeOptionTitle( options: BindingOptions ) : BindingOptions {\n        options.title = getDefaultObject( options.title, {} as Title );\n        options.title.text = getDefaultString( options.title.text, \"Heat.js\" );\n        options.title.showText = getDefaultBoolean( options.title.showText, true );\n        options.title.showYearSelector = getDefaultBoolean( options.title.showYearSelector, true );\n        options.title.showRefreshButton = getDefaultBoolean( options.title.showRefreshButton, false );\n        options.title.showExportButton = getDefaultBoolean( options.title.showExportButton, false );\n        options.title.extraSelectionYears = getDefaultNumber( options.title.extraSelectionYears, 50 );\n        options.title.showYearSelectionDropDown = getDefaultBoolean( options.title.showYearSelectionDropDown, true );\n        options.title.showImportButton = getDefaultBoolean( options.title.showImportButton, false );\n        options.title.showConfigurationButton = getDefaultBoolean( options.title.showConfigurationButton, true );\n        options.title.showTitleDropDownButton = getDefaultBoolean( options.title.showTitleDropDownButton, true );\n        options.title.showTitleDropDownHeaders = getDefaultBoolean( options.title.showTitleDropDownHeaders, true );\n\n        return options;\n    }\n\n    function buildAttributeOptionDescription( options: BindingOptions ) {\n        options.description = getDefaultObject( options.description, {} as Description );\n        options.description.text = getDefaultString( options.description.text, null );\n        options.description.url = getDefaultString( options.description.url, null );\n        options.description.urlTarget = getDefaultString( options.description.urlTarget, \"_blank\" );\n\n        return options;\n    }\n\n    function buildAttributeOptionGuide( options: BindingOptions ) : BindingOptions {\n        options.guide = getDefaultObject( options.guide, {} as Guide );\n        options.guide.enabled = getDefaultBoolean( options.guide.enabled, true );\n        options.guide.colorRangeTogglesEnabled = getDefaultBoolean( options.guide.colorRangeTogglesEnabled, true );\n        options.guide.showLessAndMoreLabels = getDefaultBoolean( options.guide.showLessAndMoreLabels, true );\n        options.guide.showNumbersInGuide = getDefaultBoolean( options.guide.showNumbersInGuide, false );\n\n        return options;\n    }\n\n    function buildAttributeOptionToolTip( options: BindingOptions ) : BindingOptions {\n        options.tooltip = getDefaultObject( options.tooltip, {} as Tooltip );\n        options.tooltip.delay = getDefaultNumber( options.tooltip.delay, 750 );\n        options.tooltip.dayText = getDefaultString( options.tooltip.dayText, \"{d}{o} {mmmm} {yyyy}\" );\n\n        return options;\n    }\n\n    function buildAttributeOptionMapView( options: BindingOptions ) : BindingOptions {\n        options.views.map = getDefaultObject( options.views.map, {} as Map );\n        options.views.map.showMonthDayGaps = getDefaultBoolean( options.views.map.showMonthDayGaps, true );\n        options.views.map.showDayNames = getDefaultBoolean( options.views.map.showDayNames, true );\n        options.views.map.placeMonthNamesOnTheBottom = getDefaultBoolean( options.views.map.placeMonthNamesOnTheBottom, false );\n        options.views.map.showDayNumbers = getDefaultBoolean( options.views.map.showDayNumbers, false );\n        options.views.map.showMonthNames = getDefaultBoolean( options.views.map.showMonthNames, true );\n        options.views.map.showDaysInReverseOrder = getDefaultBoolean( options.views.map.showDaysInReverseOrder, false );\n        options.views.map.showNoDataMessageWhenDataIsNotAvailable = getDefaultBoolean( options.views.map.showNoDataMessageWhenDataIsNotAvailable, false );\n        options.views.map.showMinimalDayNames = getDefaultBoolean( options.views.map.showMinimalDayNames, false );\n        options.views.map.showMonthsInReverseOrder = getDefaultBoolean( options.views.map.showMonthsInReverseOrder, false );\n        options.views.map.keepScrollPositions = getDefaultBoolean( options.views.map.keepScrollPositions, false );\n\n        if ( isInvalidOptionArray( options.views.map.monthsToShow ) ) {\n            options.views.map.monthsToShow = _default_MonthsToShow;\n        }\n\n        if ( isInvalidOptionArray( options.views.map.daysToShow ) ) {\n            options.views.map.daysToShow = _default_DaysToShow;\n        }\n\n        return options;\n    }\n\n    function buildAttributeOptionChartView( options: BindingOptions ) : BindingOptions {\n        options.views.chart = getDefaultObject( options.views.chart, {} as Chart );\n        options.views.chart.enabled = getDefaultBoolean( options.views.chart.enabled, true );\n        options.views.chart.showChartYLabels = getDefaultBoolean( options.views.chart.showChartYLabels, true );\n        options.views.chart.showMonthNames = getDefaultBoolean( options.views.chart.showMonthNames, true );\n        options.views.chart.showLineNumbers = getDefaultBoolean( options.views.chart.showLineNumbers, false );\n        options.views.chart.showInReverseOrder = getDefaultBoolean( options.views.chart.showInReverseOrder, false );\n        options.views.chart.keepScrollPositions = getDefaultBoolean( options.views.chart.keepScrollPositions, false );\n\n        if ( isInvalidOptionArray( options.views.chart.monthsToShow ) ) {\n            options.views.chart.monthsToShow = _default_MonthsToShow;\n        }\n\n        if ( isInvalidOptionArray( options.views.chart.daysToShow ) ) {\n            options.views.chart.daysToShow = _default_DaysToShow;\n        }\n\n        return options;\n    }\n\n    function buildAttributeOptionDaysView( options: BindingOptions ) : BindingOptions {\n        options.views.days = getDefaultObject( options.views.days, {} as Days );\n        options.views.days.enabled = getDefaultBoolean( options.views.days.enabled, true );\n        options.views.days.showChartYLabels = getDefaultBoolean( options.views.days.showChartYLabels, true );\n        options.views.days.showDayNames = getDefaultBoolean( options.views.days.showDayNames, true );\n        options.views.days.showInReverseOrder = getDefaultBoolean( options.views.days.showInReverseOrder, false );\n        options.views.days.showDayNumbers = getDefaultBoolean( options.views.days.showDayNumbers, false );\n        options.views.days.keepScrollPositions = getDefaultBoolean( options.views.days.keepScrollPositions, false );\n\n        if ( isInvalidOptionArray( options.views.days.monthsToShow ) ) {\n            options.views.days.monthsToShow = _default_MonthsToShow;\n        }\n\n        if ( isInvalidOptionArray( options.views.days.daysToShow ) ) {\n            options.views.days.daysToShow = _default_DaysToShow;\n        }\n\n        return options;\n    }\n\n    function buildAttributeOptionStatisticsView( options: BindingOptions ) : BindingOptions {\n        options.views.statistics = getDefaultObject( options.views.statistics, {} as Statistics );\n        options.views.statistics.enabled = getDefaultBoolean( options.views.statistics.enabled, true );\n        options.views.statistics.showChartYLabels = getDefaultBoolean( options.views.statistics.showChartYLabels, true );\n        options.views.statistics.showColorRangeLabels = getDefaultBoolean( options.views.statistics.showColorRangeLabels, true );\n        options.views.statistics.useColorRangeNamesForLabels = getDefaultBoolean( options.views.statistics.useColorRangeNamesForLabels, false );\n        options.views.statistics.showRangeNumbers = getDefaultBoolean( options.views.statistics.showRangeNumbers, false );\n        options.views.statistics.showInReverseOrder = getDefaultBoolean( options.views.statistics.showInReverseOrder, false );\n        options.views.statistics.keepScrollPositions = getDefaultBoolean( options.views.statistics.keepScrollPositions, false );\n\n        if ( isInvalidOptionArray( options.views.statistics.monthsToShow ) ) {\n            options.views.statistics.monthsToShow = _default_MonthsToShow;\n        }\n\n        if ( isInvalidOptionArray( options.views.statistics.daysToShow ) ) {\n            options.views.statistics.daysToShow = _default_DaysToShow;\n        }\n\n        return options;\n    }\n\n    function buildAttributeOptionCustomTriggers( options : BindingOptions ) : BindingOptions {\n        options.events = getDefaultObject( options.events, {} as Events );\n        options.events.onDayClick = getDefaultFunction( options.events.onDayClick, null );\n        options.events.onBackYear = getDefaultFunction( options.events.onBackYear, null );\n        options.events.onNextYear = getDefaultFunction( options.events.onNextYear, null );\n        options.events.onRefresh = getDefaultFunction( options.events.onRefresh, null );\n        options.events.onBeforeRender = getDefaultFunction( options.events.onBeforeRender, null );\n        options.events.onRenderComplete = getDefaultFunction( options.events.onRenderComplete, null );\n        options.events.onDestroy = getDefaultFunction( options.events.onDestroy, null );\n        options.events.onExport = getDefaultFunction( options.events.onExport, null );\n        options.events.onSetYear = getDefaultFunction( options.events.onSetYear, null );\n        options.events.onTypeSwitch = getDefaultFunction( options.events.onTypeSwitch, null );\n        options.events.onDayToolTipRender = getDefaultFunction( options.events.onDayToolTipRender, null );\n        options.events.onAdd = getDefaultFunction( options.events.onAdd, null );\n        options.events.onRemove = getDefaultFunction( options.events.onRemove, null );\n        options.events.onReset = getDefaultFunction( options.events.onReset, null );\n        options.events.onViewSwitch = getDefaultFunction( options.events.onViewSwitch, null );\n        options.events.onColorRangeTypeToggle = getDefaultFunction( options.events.onColorRangeTypeToggle, null );\n        options.events.onImport = getDefaultFunction( options.events.onImport, null );\n        options.events.onStatisticClick = getDefaultFunction( options.events.onStatisticClick, null );\n        options.events.onDataFetch = getDefaultFunction( options.events.onDataFetch, null );\n        options.events.onClear = getDefaultFunction( options.events.onClear, null );\n        options.events.onUpdate = getDefaultFunction( options.events.onUpdate, null );\n        options.events.onOptionsUpdate = getDefaultFunction( options.events.onOptionsUpdate, null );\n        options.events.onWeekDayClick = getDefaultFunction( options.events.onWeekDayClick, null );\n\n        return options;\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Date/Time\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function getTotalDaysInMonth( year: number, month: number ) : number {\n        return new Date( year, month + 1, 0 ).getDate();\n    }\n\n    function getWeekdayNumber( date: Date ) : number {\n        return date.getDay() - 1 < 0 ? 6 : date.getDay() - 1;\n    }\n\n    function getDayOrdinal( value: number ) : string {\n        let result: string = _configuration.thText;\n\n        if ( value === 31 || value === 21 || value === 1 ) {\n            result = _configuration.stText;\n        } else if ( value === 22 || value === 2 ) {\n            result = _configuration.ndText;\n        } else if ( value === 23 || value === 3 ) {\n            result = _configuration.rdText;\n        }\n\n        return result;\n    }\n\n    function getCustomFormattedDateText( dateFormat: string, date: Date ) : string {\n        let result: string = dateFormat;\n        const weekDayNumber: number = getWeekdayNumber( date );\n\n        result = result.replace( \"{dddd}\", _configuration.dayNames[ weekDayNumber ] );\n        result = result.replace( \"{dd}\", padNumber( date.getDate() ) );\n        result = result.replace( \"{d}\", date.getDate().toString() );\n\n        result = result.replace( \"{o}\", getDayOrdinal( date.getDate() ) );\n\n        result = result.replace( \"{mmmm}\", _configuration.monthNames[ date.getMonth() ] );\n        result = result.replace( \"{mm}\", padNumber( date.getMonth() + 1 ) );\n        result = result.replace( \"{m}\", ( date.getMonth() + 1 ).toString() );\n\n        result = result.replace( \"{yyyy}\", date.getFullYear().toString() );\n        result = result.replace( \"{yyy}\", date.getFullYear().toString().substring( 1 ) );\n        result = result.replace( \"{yy}\", date.getFullYear().toString().substring( 2 ) );\n        result = result.replace( \"{y}\", parseInt( date.getFullYear().toString().substring( 2 ) ).toString() );\n\n        return result;\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Element Handling\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function createElementWithNoContainer( type: string ) : HTMLElement {\n        let result: HTMLElement = null;\n        const nodeType: string = type.toLowerCase();\n        const isText: boolean = nodeType === \"text\";\n\n        if ( !_elements_Type.hasOwnProperty( nodeType ) ) {\n            _elements_Type[ nodeType ] = isText ? documentObject.createTextNode( STRING.empty ) : documentObject.createElement( nodeType );\n        }\n\n        result = _elements_Type[ nodeType ].cloneNode( false );\n\n        return result;\n    }\n\n    function createElement( container: HTMLElement, type: string, className: string = STRING.empty, beforeNode: HTMLElement = null ) : HTMLElement {\n        let result: HTMLElement = null;\n        const nodeType: string = type.toLowerCase();\n        const isText: boolean = nodeType === \"text\";\n\n        if ( !_elements_Type.hasOwnProperty( nodeType ) ) {\n            _elements_Type[ nodeType ] = isText ? documentObject.createTextNode( STRING.empty ) : documentObject.createElement( nodeType );\n        }\n\n        result = _elements_Type[ nodeType ].cloneNode( false );\n\n        if ( isDefined( className ) ) {\n            result.className = className;\n        }\n\n        if ( isDefined( beforeNode ) ) {\n            container.insertBefore( result, beforeNode );\n        } else {\n            container.appendChild( result );\n        }\n\n        return result;\n    }\n\n    function createElementWithHTML( container: HTMLElement, type: string, className: string, html: string, beforeNode: HTMLElement = null ) : HTMLElement {\n        const element: HTMLElement = createElement( container, type, className, beforeNode );\n        element.innerHTML = html;\n\n        return element;\n    }\n\n    function getStyleValueByName( element: any, stylePropertyName: string, toNumber: boolean = false ) : any {\n        let value: any = null;\n        \n        if ( documentObject.defaultView.getComputedStyle ) {\n            value = documentObject.defaultView.getComputedStyle( element, null ).getPropertyValue( stylePropertyName ); \n        } else if ( element.currentStyle ) {\n            value = element.currentStyle[ stylePropertyName ];\n        }   \n        \n        if ( toNumber ) {\n            value = parseFloat( value );\n        }\n\n        return value;\n    }\n\n    function addClass( element: HTMLElement, className: string ) {\n        element.className += STRING.space + className;\n        element.className = element.className.trim();\n    }\n\n    function removeClass( element: HTMLElement, className: string ) {\n        element.className = element.className.replace( className, STRING.empty );\n        element.className = element.className.trim();\n    }\n\n    function cancelBubble( e: any ) {\n        e.preventDefault();\n        e.cancelBubble = true;\n    }\n\n    function getScrollPosition() : object {\n        const doc: HTMLElement = documentObject.documentElement;\n        const left: number = ( windowObject.pageXOffset || doc.scrollLeft )  - ( doc.clientLeft || 0 );\n        const top: number = ( windowObject.pageYOffset || doc.scrollTop ) - ( doc.clientTop || 0 );\n\n        return {\n            left: left,\n            top: top\n        };\n    }\n\n    function showElementAtMousePosition( e: any, element: HTMLElement ) {\n        let left: number = e.pageX;\n        let top: number = e.pageY;\n        const scrollPosition: any = getScrollPosition();\n\n        element.style.display = \"block\";\n\n        if ( left + element.offsetWidth > windowObject.innerWidth ) {\n            left -= element.offsetWidth;\n        } else {\n            left++;\n        }\n\n        if ( top + element.offsetHeight > windowObject.innerHeight ) {\n            top -= element.offsetHeight;\n        } else {\n            top++;\n        }\n\n        if ( left < scrollPosition.left ) {\n            left = e.pageX + 1;\n        }\n\n        if ( top < scrollPosition.top ) {\n            top = e.pageY + 1;\n        }\n        \n        element.style.left = left + \"px\";\n        element.style.top = top + \"px\";\n    }\n\n    function reverseElementsOrder( parent: HTMLElement ) {\n        const children: HTMLCollection = parent.children;\n        let childrenLength: number = children.length - 1;\n\n        for ( ; childrenLength--; ) {\n            parent.appendChild( children[ childrenLength ] );\n        }\n    }\n\n    function buildCheckBox( container: HTMLElement, labelText: string, checked: boolean = null, onClick: Function = null ) : any {\n        const lineContainer: HTMLElement = createElement( container, \"div\" );\n        const label: HTMLElement = createElement( lineContainer, \"label\", \"checkbox\" );\n        const input: any = createElement( label, \"input\" );\n\n        input.type = \"checkbox\";\n\n        if ( isDefined( onClick ) ) {\n            input.onclick = onClick;\n        }\n\n        if ( isDefined( checked ) ) {\n            input.checked = checked;\n        }\n\n        createElement( label, \"span\", \"check-mark\" );\n        createElementWithHTML( label, \"span\", \"text\", labelText );\n        \n        return {\n            input: input,\n            label: label\n        };\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Triggering Custom Events\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function fireCustomTriggerEvent( triggerFunction: Function, ...args : any[] ) : any {\n        let result: any = null;\n\n        if ( isDefinedFunction( triggerFunction ) ) {\n            result = triggerFunction.apply( null, [].slice.call( args, 0 ) );\n        }\n\n        return result;\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Validation\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function isDefined( value: any ) : boolean  {\n        return value !== null && value !== undefined && value.toString() !== STRING.empty;\n    }\n\n    function isDefinedObject( object: any ) : boolean {\n        return isDefined( object ) && typeof object === \"object\";\n    }\n\n    function isDefinedBoolean( object: any ) : boolean  {\n        return isDefined( object ) && typeof object === \"boolean\";\n    }\n\n    function isDefinedString( object: any ) : boolean  {\n        return isDefined( object ) && typeof object === \"string\";\n    }\n\n    function isDefinedFunction( object: any ) : boolean  {\n        return isDefined( object ) && typeof object === \"function\";\n    }\n\n    function isDefinedNumber( object: any ) : boolean  {\n        return isDefined( object ) && typeof object === \"number\";\n    }\n\n    function isDefinedArray( object: any ) : boolean  {\n        return isDefinedObject( object ) && object instanceof Array;\n    }\n\n    function isDefinedDate( object: any ) : boolean  {\n        return isDefinedObject( object ) && object instanceof Date;\n    }\n\n    function isInvalidOptionArray( array: any, minimumLength: number = 1 ) : boolean {\n        return !isDefinedArray( array ) || array.length < minimumLength;\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Default Parameter/Option Handling\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function getDefaultAnyString( value: any, defaultValue: string ) : string  {\n        return typeof value === \"string\" ? value : defaultValue;\n    }\n\n    function getDefaultString( value: any, defaultValue: string ) : string {\n        return isDefinedString( value ) ? value : defaultValue;\n    }\n\n    function getDefaultBoolean( value: any, defaultValue: boolean ) : boolean {\n        return isDefinedBoolean( value ) ? value : defaultValue;\n    }\n\n    function getDefaultNumber( value: any, defaultValue: number ) : number {\n        return isDefinedNumber( value ) ? value : defaultValue;\n    }\n\n    function getDefaultFunction( value: any, defaultValue: object ) : any {\n        return isDefinedFunction( value ) ? value : defaultValue;\n    }\n\n    function getDefaultArray( value: any, defaultValue: any[] ) : any[] {\n        return isDefinedArray( value ) ? value : defaultValue;\n    }\n\n    function getDefaultObject( value: any, defaultValue: object ) : any {\n        return isDefinedObject( value ) ? value : defaultValue;\n    }\n\n    function getDefaultStringOrArray( value: any, defaultValue: any[] ) : any[] {\n        let result: any[] = defaultValue;\n\n        if ( isDefinedString( value ) ) {\n            const values: string[] = value.toString().split( STRING.space );\n\n            if ( values.length === 0 ) {\n                value = defaultValue;\n            } else {\n                result = values;\n            }\n\n        } else {\n            result = getDefaultArray( value, defaultValue );\n        }\n\n        return result;\n    }\n\n    function getObjectFromString( objectString: any ) : any {\n        let parsed: boolean = true,\n            result: any = null;\n\n        try {\n            if ( isDefinedString( objectString ) ) {\n                result = jsonObject.parse( objectString );\n            }\n\n        } catch ( e1 ) {\n\n            try {\n                let evalResult: Function = result = eval( \"(\" + objectString + \")\" );\n\n                if ( isDefinedFunction( result ) ) {\n                    result = evalResult();\n                }\n                \n            } catch ( e2 ) {\n                if ( !_configuration.safeMode ) {\n                    console.error( _configuration.objectErrorText.replace( \"{{error_1}}\",  e1.message ).replace( \"{{error_2}}\",  e2.message ) );\n                    parsed = false;\n                }\n                \n                result = null;\n            }\n        }\n\n        return {\n            parsed: parsed,\n            result: result\n        };\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * String Handling\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function newGuid() : string {\n        const result: string[] = [];\n\n        for ( let charIndex: number = 0; charIndex < 32; charIndex++ ) {\n            if ( charIndex === 8 || charIndex === 12 || charIndex === 16 || charIndex === 20 ) {\n                result.push( STRING.dash );\n            }\n\n            const character: string = mathObject.floor( mathObject.random() * 16 ).toString( 16 );\n            result.push( character );\n        }\n\n        return result.join( STRING.empty );\n    }\n\n    function padNumber( number: number ) : string {\n        const numberString: string = number.toString();\n\n        return numberString.length === 1 ? STRING.zero + numberString : numberString;\n    }\n\n    function startsWithAnyCase( data: string, start: string ) : boolean {\n        return data.substring( 0, start.length ).toLowerCase() === start.toLowerCase();\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Storage Dates\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function toStorageDate( date: Date ) : string {\n        return date.getFullYear() + STRING.dash + padNumber( date.getMonth() + 1 ) + STRING.dash + padNumber( date.getDate() );\n    }\n\n    function getStorageDate( data: string ) : string[] {\n        return data.split( STRING.dash );\n    }\n\n    function getStorageDateYear( data: string ) : string {\n        return data.split( STRING.dash )[ 0 ];\n    }\n\n\n\t/*\n\t * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t * Public API Functions:  Helpers:  Manage Instances\n\t * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t */\n\n    function moveToPreviousYear( bindingOptions: BindingOptions, callCustomTrigger: boolean = true ) : void {\n        let render: boolean = true;\n        let year: number = bindingOptions._currentView.year;\n            \n        year--;\n\n        while ( !isYearVisible( bindingOptions, year ) ) {\n            if ( isFirstVisibleYear( bindingOptions, year ) ) {\n                render = false;\n                break;\n            }\n\n            year--;\n        }\n\n        if ( render ) {\n            bindingOptions._currentView.year = year;\n\n            renderControlContainer( bindingOptions );\n\n            if ( callCustomTrigger ) {\n                fireCustomTriggerEvent( bindingOptions.events.onBackYear, bindingOptions._currentView.year );\n            }\n        }\n    }\n\n    function moveToNextYear( bindingOptions: BindingOptions, callCustomTrigger: boolean = true ) : void {\n        let render: boolean = true;\n        let year: number = bindingOptions._currentView.year;\n\n        year++;\n\n        while ( !isYearVisible( bindingOptions, year ) ) {\n            if ( isLastVisibleYear( bindingOptions, year ) ) {\n                render = false;\n                break;\n            }\n\n            year++;\n        }\n\n        if ( render ) {\n            bindingOptions._currentView.year = year;\n\n            renderControlContainer( bindingOptions );\n\n            if ( callCustomTrigger ) {\n                fireCustomTriggerEvent( bindingOptions.events.onBackYear, bindingOptions._currentView.year );\n            }\n        }\n    }\n\n\n\t/*\n\t * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t * Public API Functions:  Helpers:  Destroy\n\t * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t */\n\n    function destroyElement( bindingOptions: BindingOptions ) : void {\n        bindingOptions._currentView.element.innerHTML = STRING.empty;\n\n        removeClass( bindingOptions._currentView.element, \"heat-js\" );\n        assignToolTipEvents( bindingOptions, false );\n\n        documentObject.body.removeChild( bindingOptions._currentView.tooltip );\n\n        if ( bindingOptions._currentView.isInFetchMode && isDefined( bindingOptions._currentView.isInFetchModeTimer ) ) {\n            clearInterval( bindingOptions._currentView.isInFetchModeTimer );\n        }\n\n        fireCustomTriggerEvent( bindingOptions.events.onDestroy, bindingOptions._currentView.element );\n    }\n\n\t/*\n\t * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t * Public API Functions:  Helpers:  Configuration\n\t * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t */\n\n    function buildDefaultConfiguration( newConfiguration: Configuration = null ) : void {\n        _configuration = !isDefinedObject( newConfiguration ) ? {} as Configuration : newConfiguration;\n        _configuration.safeMode = getDefaultBoolean( _configuration.safeMode, true );\n        _configuration.domElementTypes = getDefaultStringOrArray( _configuration.domElementTypes, [ \"*\" ] );\n\n        buildDefaultConfigurationStrings();\n        buildDefaultConfigurationArrays();\n    }\n\n    function buildDefaultConfigurationStrings() : void {\n        _configuration.stText = getDefaultAnyString( _configuration.stText, \"st\" );\n        _configuration.ndText = getDefaultAnyString( _configuration.ndText, \"nd\" );\n        _configuration.rdText = getDefaultAnyString( _configuration.rdText, \"rd\" );\n        _configuration.thText = getDefaultAnyString( _configuration.thText, \"th\" );\n        _configuration.backButtonText = getDefaultAnyString( _configuration.backButtonText, \"Back\" );\n        _configuration.nextButtonText = getDefaultAnyString( _configuration.nextButtonText, \"Next\" );\n        _configuration.refreshButtonText = getDefaultAnyString( _configuration.refreshButtonText, \"Refresh\" );\n        _configuration.exportButtonText = getDefaultAnyString( _configuration.exportButtonText, \"Export\" );\n        _configuration.lessText = getDefaultAnyString( _configuration.lessText, \"Less\" );\n        _configuration.moreText = getDefaultAnyString( _configuration.moreText, \"More\" );\n        _configuration.dateText = getDefaultAnyString( _configuration.dateText, \"Date\" );\n        _configuration.countText = getDefaultAnyString( _configuration.countText, \"Count\" );\n        _configuration.mapText = getDefaultAnyString( _configuration.mapText, \"Map\" );\n        _configuration.chartText = getDefaultAnyString( _configuration.chartText, \"Chart\" );\n        _configuration.noChartDataMessage = getDefaultAnyString( _configuration.noChartDataMessage, \"There is currently no data to view.\" );\n        _configuration.statisticsText = getDefaultAnyString( _configuration.statisticsText, \"Statistics\" );\n        _configuration.noStatisticsDataMessage = getDefaultAnyString( _configuration.noStatisticsDataMessage, \"There are currently no statistics to view.\" );\n        _configuration.unknownTrendText = getDefaultAnyString( _configuration.unknownTrendText, \"Unknown\" );\n        _configuration.importButtonText = getDefaultAnyString( _configuration.importButtonText, \"Import\" );\n        _configuration.noMapDataMessage = getDefaultAnyString( _configuration.noMapDataMessage, \"There is currently no data to view.\" );\n        _configuration.objectErrorText = getDefaultAnyString( _configuration.objectErrorText, \"Errors in object: {{error_1}}, {{error_2}}\" );\n        _configuration.attributeNotValidErrorText = getDefaultAnyString( _configuration.attributeNotValidErrorText, \"The attribute '{{attribute_name}}' is not a valid object.\" );\n        _configuration.attributeNotSetErrorText = getDefaultAnyString( _configuration.attributeNotSetErrorText, \"The attribute '{{attribute_name}}' has not been set correctly.\" );\n        _configuration.closeToolTipText = getDefaultAnyString( _configuration.closeToolTipText, \"Close\" );\n        _configuration.configurationToolTipText = getDefaultAnyString( _configuration.configurationToolTipText, \"Configuration\" );\n        _configuration.configurationTitleText = getDefaultAnyString( _configuration.configurationTitleText, \"Configuration\" );\n        _configuration.visibleMonthsText = getDefaultAnyString( _configuration.visibleMonthsText, \"Visible Months\" );\n        _configuration.visibleDaysText = getDefaultAnyString( _configuration.visibleDaysText, \"Visible Days\" );\n        _configuration.dataText = getDefaultAnyString( _configuration.dataText, \"Data\" );\n        _configuration.colorRangesText = getDefaultAnyString( _configuration.colorRangesText, \"Color Ranges\" );\n        _configuration.yearText = getDefaultAnyString( _configuration.yearText, \"Year\" );\n        _configuration.daysText = getDefaultAnyString( _configuration.daysText, \"Days\" );\n        _configuration.noDaysDataMessage = getDefaultAnyString( _configuration.noDaysDataMessage, \"There are currently no days to view.\" );\n    }\n\n    function buildDefaultConfigurationArrays() : void {\n        if ( isInvalidOptionArray( _configuration.monthNames, 12 ) ) {\n            _configuration.monthNames = [\n                \"Jan\",\n                \"Feb\",\n                \"Mar\",\n                \"Apr\",\n                \"May\",\n                \"Jun\",\n                \"Jul\",\n                \"Aug\",\n                \"Sep\",\n                \"Oct\",\n                \"Nov\",\n                \"Dec\"\n            ];\n        }\n\n        if ( isInvalidOptionArray( _configuration.dayNames, 7 ) ) {\n            _configuration.dayNames = [\n                \"Mon\",\n                \"Tue\",\n                \"Wed\",\n                \"Thu\",\n                \"Fri\",\n                \"Sat\",\n                \"Sun\"\n            ];\n        }\n    }\n\n\n\t/*\n\t * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t * Public API Functions:\n\t * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t */\n\n    const _public: PublicApi = {\n\n        /*\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         * Public Functions:  Manage Dates\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         */\n\n        addDates: function ( elementId: string, dates: Date[], type: string, triggerRefresh: boolean = true ) : PublicApi {\n            if ( isDefinedString( elementId ) && isDefinedArray( dates ) && _elements_DateCounts.hasOwnProperty( elementId ) ) {\n                const bindingOptions: BindingOptions = _elements_DateCounts[ elementId ].options;\n                \n                if ( !bindingOptions._currentView.isInFetchMode ) {\n                    type = getDefaultString( type, _configuration.unknownTrendText );\n        \n                    const datesLength: number = dates.length;\n        \n                    for ( let dateIndex: number = 0; dateIndex < datesLength; dateIndex++ ) {\n                        _public.addDate( elementId, dates[ dateIndex ], type, false );\n                    }\n        \n                    if ( triggerRefresh ) {\n                        renderControlContainer( bindingOptions, true );\n                    }\n                }\n            }\n    \n            return _public;\n        },\n\n        addDate: function ( elementId: string, date: Date, type: string, triggerRefresh: boolean = true ) : PublicApi {\n            if ( isDefinedString( elementId ) && isDefinedDate( date ) && _elements_DateCounts.hasOwnProperty( elementId ) ) {\n                const bindingOptions: BindingOptions = _elements_DateCounts[ elementId ].options;\n                \n                if ( !bindingOptions._currentView.isInFetchMode ) {\n                    type = getDefaultString( type, _configuration.unknownTrendText );\n        \n                    const storageDate: string = toStorageDate( date );\n        \n                    if ( !_elements_DateCounts[ elementId ].type.hasOwnProperty( type ) ) {\n                        _elements_DateCounts[ elementId ].type[ type ] = {};\n                        _elements_DateCounts[ elementId ].types++;\n                    }\n        \n                    if ( !_elements_DateCounts[ elementId ].type[ type ].hasOwnProperty( storageDate ) ) {\n                        _elements_DateCounts[ elementId ].type[ type ][ storageDate ] = 0;\n                    }\n            \n                    _elements_DateCounts[ elementId ].type[ type ][ storageDate ]++;\n        \n                    fireCustomTriggerEvent( bindingOptions.events.onAdd, bindingOptions._currentView.element );\n        \n                    if ( triggerRefresh ) {\n                        renderControlContainer( bindingOptions, true );\n                    }\n                }\n            }\n    \n            return _public;\n        },\n\n        updateDate: function ( elementId: string, date: Date, count: number, type: string, triggerRefresh: boolean = true ) : PublicApi {\n            if ( isDefinedString( elementId ) && isDefinedDate( date ) && _elements_DateCounts.hasOwnProperty( elementId ) ) {\n                const bindingOptions: BindingOptions = _elements_DateCounts[ elementId ].options;\n                \n                if ( !bindingOptions._currentView.isInFetchMode && count > 0 ) {\n                    type = getDefaultString( type, _configuration.unknownTrendText );\n    \n                    const storageDate: string = toStorageDate( date );\n        \n                    if ( _elements_DateCounts[ elementId ].type.hasOwnProperty( type ) ) {        \n                        _elements_DateCounts[ elementId ].type[ type ][ storageDate ] = count;\n        \n                        fireCustomTriggerEvent( bindingOptions.events.onUpdate, bindingOptions._currentView.element );\n        \n                        if ( triggerRefresh ) {\n                            renderControlContainer( bindingOptions, true );\n                        }\n                    }\n                }\n            }\n    \n            return _public;\n        },\n\n        removeDates: function ( elementId: string, dates: Date[], type: string, triggerRefresh: boolean = true ) : PublicApi {\n            if ( isDefinedString( elementId ) && isDefinedArray( dates ) && _elements_DateCounts.hasOwnProperty( elementId ) ) {\n                const bindingOptions: BindingOptions = _elements_DateCounts[ elementId ].options;\n                \n                if ( !bindingOptions._currentView.isInFetchMode ) {\n                    type = getDefaultString( type, _configuration.unknownTrendText );\n        \n                    const datesLength: number = dates.length;\n        \n                    for ( let dateIndex: number = 0; dateIndex < datesLength; dateIndex++ ) {\n                        _public.removeDate( elementId, dates[ dateIndex ], type, false );\n                    }\n        \n                    if ( triggerRefresh ) {\n                        renderControlContainer( bindingOptions, true );\n                    }\n                }\n            }\n    \n            return _public;\n        },\n\n        removeDate: function ( elementId: string, date: Date, type: string, triggerRefresh: boolean = true ) : PublicApi {\n            if ( isDefinedString( elementId ) && isDefinedDate( date ) && _elements_DateCounts.hasOwnProperty( elementId ) ) {\n                const bindingOptions: BindingOptions = _elements_DateCounts[ elementId ].options;\n                \n                if ( !bindingOptions._currentView.isInFetchMode ) {\n                    type = getDefaultString( type, _configuration.unknownTrendText );\n    \n                    const storageDate: string = toStorageDate( date );\n        \n                    if ( _elements_DateCounts[ elementId ].type.hasOwnProperty( type ) && _elements_DateCounts[ elementId ].type[ type ].hasOwnProperty( storageDate ) ) {\n                        if ( _elements_DateCounts[ elementId ].type[ type ][ storageDate ] > 0 ) {\n                            _elements_DateCounts[ elementId ].type[ type ][ storageDate ]--;\n                        }\n        \n                        fireCustomTriggerEvent( bindingOptions.events.onRemove, bindingOptions._currentView.element );\n        \n                        if ( triggerRefresh ) {\n                            renderControlContainer( bindingOptions, true );\n                        }\n                    }\n                }\n            }\n    \n            return _public;\n        },\n\n        clearDate: function ( elementId: string, date: Date, type: string, triggerRefresh: boolean = true ) : PublicApi {\n            if ( isDefinedString( elementId ) && isDefinedDate( date ) && _elements_DateCounts.hasOwnProperty( elementId ) ) {\n                const bindingOptions: BindingOptions = _elements_DateCounts[ elementId ].options;\n                \n                if ( !bindingOptions._currentView.isInFetchMode ) {\n                    type = getDefaultString( type, _configuration.unknownTrendText );\n    \n                    const storageDate: string = toStorageDate( date );\n        \n                    if ( _elements_DateCounts[ elementId ].type.hasOwnProperty( type ) && _elements_DateCounts[ elementId ].type[ type ].hasOwnProperty( storageDate ) ) {\n                        delete _elements_DateCounts[ elementId ].type[ type ][ storageDate ];\n        \n                        fireCustomTriggerEvent( bindingOptions.events.onClear, bindingOptions._currentView.element );\n        \n                        if ( triggerRefresh ) {\n                            renderControlContainer( bindingOptions, true );\n                        }\n                    }\n                }\n            }\n    \n            return _public;\n        },\n\n        resetAll: function ( triggerRefresh: boolean = true ) : PublicApi {\n            for ( let elementId in _elements_DateCounts ) {\n                if ( _elements_DateCounts.hasOwnProperty( elementId ) ) {\n                    _public.reset( elementId, triggerRefresh );\n                }\n            }\n    \n            return _public;\n        },\n\n        reset: function ( elementId: string, triggerRefresh: boolean = true ) : PublicApi {\n            if ( isDefinedString( elementId ) && _elements_DateCounts.hasOwnProperty( elementId ) ) {\n                const bindingOptions: BindingOptions = _elements_DateCounts[ elementId ].options;\n                \n                if ( !bindingOptions._currentView.isInFetchMode ) {\n                    bindingOptions._currentView.type = _configuration.unknownTrendText;\n        \n                    createDateStorageForElement( elementId, bindingOptions, false );\n                    fireCustomTriggerEvent( bindingOptions.events.onReset, bindingOptions._currentView.element );\n        \n                    if ( triggerRefresh ) {\n                        renderControlContainer( bindingOptions, true );\n                    }\n                }\n            }\n    \n            return _public;\n        },\n\n\n        /*\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         * Public Functions:  Export/Import\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         */\n\n        import: function ( elementId: string, files: FileList ) : PublicApi {\n            if ( isDefinedString( elementId ) && _elements_DateCounts.hasOwnProperty( elementId ) && isDefinedArray( files ) ) {\n                importFromFiles( files, _elements_DateCounts[ elementId ].options );\n            }\n    \n            return _public;\n        },\n\n        export: function ( elementId: string, exportType: string ) : PublicApi {\n            if ( isDefinedString( elementId ) && _elements_DateCounts.hasOwnProperty( elementId ) ) {\n                exportAllData( _elements_DateCounts[ elementId ].options, exportType );\n            }\n    \n            return _public;\n        },\n\n\n        /*\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         * Public Functions:  Manage Instances\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         */\n\n        refresh: function ( elementId: string ) : PublicApi {\n            if ( isDefinedString( elementId ) && _elements_DateCounts.hasOwnProperty( elementId ) ) {\n                const bindingOptions: BindingOptions = _elements_DateCounts[ elementId ].options;\n    \n                renderControlContainer( bindingOptions, true );\n                fireCustomTriggerEvent( bindingOptions.events.onRefresh, bindingOptions._currentView.element );\n            }\n    \n            return _public;\n        },\n\n        refreshAll: function () : PublicApi {\n            for ( let elementId in _elements_DateCounts ) {\n                if ( _elements_DateCounts.hasOwnProperty( elementId ) ) {\n                    const bindingOptions: BindingOptions = _elements_DateCounts[ elementId ].options;\n    \n                    renderControlContainer( bindingOptions, true );\n                    fireCustomTriggerEvent( bindingOptions.events.onRefresh, bindingOptions._currentView.element );\n                }\n            }\n    \n            return _public;\n        },\n\n        setYear: function ( elementId: string, year: number ) : PublicApi {\n            if ( isDefinedString( elementId ) && isDefinedNumber( year ) && _elements_DateCounts.hasOwnProperty( elementId ) ) {\n                const bindingOptions: BindingOptions = _elements_DateCounts[ elementId ].options;\n                bindingOptions._currentView.year = year;\n    \n                if ( !isYearVisible( bindingOptions, bindingOptions._currentView.year ) ) {\n                    moveToNextYear( bindingOptions, false );\n                } else {\n                    renderControlContainer( bindingOptions );\n                }\n    \n                fireCustomTriggerEvent( bindingOptions.events.onSetYear, bindingOptions._currentView.year );\n            }\n    \n            return _public;\n        },\n\n        setYearToHighest: function ( elementId: string ) : PublicApi {\n            if ( isDefinedString( elementId ) && _elements_DateCounts.hasOwnProperty( elementId ) ) {\n                const bindingOptions: BindingOptions = _elements_DateCounts[ elementId ].options;\n                const data: any = getCurrentViewData( bindingOptions );\n                let maximumYear: number = 0;\n    \n                for ( let storageDate in data ) {\n                    if ( data.hasOwnProperty( storageDate ) ) {\n                        maximumYear = mathObject.max( maximumYear, parseInt( getStorageDateYear( storageDate ) ) );\n                    }\n                }\n    \n                if ( maximumYear > 0 ) {\n                    bindingOptions._currentView.year = maximumYear;\n    \n                    if ( !isYearVisible( bindingOptions, bindingOptions._currentView.year ) ) {\n                        moveToNextYear( bindingOptions, false );\n                    } else {\n                        renderControlContainer( bindingOptions );\n                    }\n    \n                    fireCustomTriggerEvent( bindingOptions.events.onSetYear, bindingOptions._currentView.year );\n                }\n            }\n    \n            return _public;\n        },\n\n        setYearToLowest: function ( elementId: string ) : PublicApi {\n            if ( isDefinedString( elementId ) && _elements_DateCounts.hasOwnProperty( elementId ) ) {\n                const bindingOptions: BindingOptions = _elements_DateCounts[ elementId ].options;\n                const data: any = getCurrentViewData( bindingOptions );\n                let minimumYear: number = 9999;\n    \n                for ( let storageDate in data ) {\n                    if ( data.hasOwnProperty( storageDate ) ) {\n                        minimumYear = mathObject.min( minimumYear, parseInt( getStorageDateYear( storageDate ) ) );\n                    }\n                }\n    \n                if ( minimumYear < 9999 ) {\n                    bindingOptions._currentView.year = minimumYear;\n    \n                    if ( !isYearVisible( bindingOptions, bindingOptions._currentView.year ) ) {\n                        moveToPreviousYear( bindingOptions, false );\n                    } else {\n                        renderControlContainer( bindingOptions );\n                    }\n    \n                    fireCustomTriggerEvent( bindingOptions.events.onSetYear, bindingOptions._currentView.year );\n                }\n            }\n    \n            return _public;\n        },\n\n        moveToPreviousYear: function ( elementId: string ) : PublicApi {\n            if ( isDefinedString( elementId ) && _elements_DateCounts.hasOwnProperty( elementId ) ) {\n                moveToPreviousYear( _elements_DateCounts[ elementId ].options );\n            }\n    \n            return _public;\n        },\n\n        moveToNextYear: function ( elementId: string ) : PublicApi {\n            if ( isDefinedString( elementId ) && _elements_DateCounts.hasOwnProperty( elementId ) ) {\n                moveToNextYear( _elements_DateCounts[ elementId ].options );\n            }\n    \n            return _public;\n        },\n\n        moveToCurrentYear: function ( elementId: string ) : PublicApi {\n            if ( isDefinedString( elementId ) && _elements_DateCounts.hasOwnProperty( elementId ) ) {\n                const bindingOptions: BindingOptions = _elements_DateCounts[ elementId ].options;\n                bindingOptions._currentView.year = new Date().getFullYear();\n    \n                if ( !isYearVisible( bindingOptions, bindingOptions._currentView.year ) ) {\n                    moveToNextYear( bindingOptions, false );\n                } else {\n                    renderControlContainer( bindingOptions );\n                }\n    \n                fireCustomTriggerEvent( bindingOptions.events.onSetYear, bindingOptions._currentView.year );\n            }\n    \n            return _public;\n        },\n\n        getYear: function ( elementId: string ) : number {\n            let result: number = null;\n\n            if ( isDefinedString( elementId ) && _elements_DateCounts.hasOwnProperty( elementId ) ) {\n                const bindingOptions: BindingOptions = _elements_DateCounts[ elementId ].options;\n    \n                result = bindingOptions._currentView.year;\n            }\n    \n            return result;\n        },\n\n        render: function ( element: HTMLElement, options: BindingOptions ) : PublicApi {\n            if ( isDefinedObject( element ) && isDefinedObject( options ) ) {\n                renderControl( renderBindingOptions( options, element ) );\n            }\n    \n            return _public;\n        },\n\n        renderAll: function () : PublicApi {\n            render();\n\n            return _public;\n        },\n\n        switchView: function ( elementId: string, viewName: string ) : PublicApi {\n            if ( isDefinedString( elementId ) && isDefinedString( viewName ) && _elements_DateCounts.hasOwnProperty( elementId ) ) {\n                const bindingOptions: BindingOptions = _elements_DateCounts[ elementId ].options;\n                let view: number = null;\n    \n                if ( viewName.toLowerCase() === VIEW_NAME.map ) {\n                    view = VIEW_ID.map;\n                } else if ( viewName.toLowerCase() === VIEW_NAME.chart ) {\n                    view = VIEW_ID.chart;\n                } else if ( viewName.toLowerCase() === VIEW_NAME.days ) {\n                    view = VIEW_ID.days;\n                } else if ( viewName.toLowerCase() === VIEW_NAME.statistics ) {\n                    view = VIEW_ID.statistics;\n                }\n    \n                if ( isDefinedNumber( view ) ) {\n                    bindingOptions._currentView.view = view;\n    \n                    fireCustomTriggerEvent( bindingOptions.events.onViewSwitch, viewName );\n                    renderControlContainer( bindingOptions, false, true );\n                }\n            }\n    \n            return _public;\n        },\n\n        switchType: function ( elementId: string, type: string ) : PublicApi {\n            if ( isDefinedString( elementId ) && isDefinedString( type ) && _elements_DateCounts.hasOwnProperty( elementId ) && _elements_DateCounts[ elementId ].type.hasOwnProperty( type ) ) {\n                const bindingOptions: BindingOptions = _elements_DateCounts[ elementId ].options;\n    \n                if ( bindingOptions._currentView.type !== type ) {\n                    bindingOptions._currentView.type = type;\n                \n                    fireCustomTriggerEvent( bindingOptions.events.onTypeSwitch, type );\n                    renderControlContainer( bindingOptions );\n                }\n            }\n    \n            return _public;\n        },\n\n        updateOptions: function ( elementId: string, newOptions: BindingOptions ) : PublicApi {\n            if ( isDefinedString( elementId ) && isDefinedObject( newOptions ) && _elements_DateCounts.hasOwnProperty( elementId ) ) {\n                const bindingOptions: BindingOptions = _elements_DateCounts[ elementId ].options;\n                const newBindingOptions: BindingOptions = buildAttributeOptions( newOptions );\n                let optionChanged: boolean = false;\n    \n                for ( let propertyName in newBindingOptions ) {\n                    if ( newBindingOptions.hasOwnProperty( propertyName ) && bindingOptions.hasOwnProperty( propertyName ) && bindingOptions[ propertyName ] !== newBindingOptions[ propertyName ] ) {\n                        bindingOptions[ propertyName ] = newBindingOptions[ propertyName ];\n                        optionChanged = true;\n                    }\n                }\n    \n                if ( optionChanged ) {\n                    renderControlContainer( bindingOptions, true );\n                    fireCustomTriggerEvent( bindingOptions.events.onRefresh, bindingOptions._currentView.element );\n                    fireCustomTriggerEvent( bindingOptions.events.onOptionsUpdate, bindingOptions._currentView.element, bindingOptions );\n                }\n            }\n    \n            return _public;\n        },\n\n\n        /*\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         * Public Functions:  Destroying\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         */\n\n        destroyAll: function () : PublicApi {\n            for ( let elementId in _elements_DateCounts ) {\n                if ( _elements_DateCounts.hasOwnProperty( elementId ) ) {\n                    destroyElement( _elements_DateCounts[ elementId ].options );\n                }\n            }\n    \n            _elements_DateCounts = {};\n    \n            return _public;\n        },\n\n        destroy: function ( elementId: string ) : PublicApi {\n            if ( isDefinedString( elementId ) && _elements_DateCounts.hasOwnProperty( elementId ) ) {\n                destroyElement( _elements_DateCounts[ elementId ].options );\n    \n                delete _elements_DateCounts[ elementId ];\n            }\n    \n            return _public;\n        },\n\n\n        /*\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         * Public Functions:  Configuration\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         */\n\n        setConfiguration: function ( newConfiguration: Configuration, triggerRefresh: boolean = true ) : PublicApi {\n            if ( isDefinedObject( newConfiguration ) ) {\n                let configurationHasChanged: boolean = false;\n            \n                for ( let propertyName in newConfiguration ) {\n                    if ( newConfiguration.hasOwnProperty( propertyName ) && _configuration.hasOwnProperty( propertyName ) && _configuration[ propertyName ] !== newConfiguration[ propertyName ] ) {\n                        _configuration[ propertyName ] = newConfiguration[ propertyName ];\n                        configurationHasChanged = true;\n                    }\n                }\n        \n                if ( configurationHasChanged ) {\n                    buildDefaultConfiguration( _configuration );\n        \n                    if ( triggerRefresh ) {\n                        _public.refreshAll();\n                    }\n                }\n            }\n    \n            return _public;\n        },\n\n\n        /*\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         * Public Functions:  Additional Data\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         */\n\n        getIds: function () : string[] {\n            const result: string[] = [];\n        \n            for ( let elementId in _elements_DateCounts ) {\n                if ( _elements_DateCounts.hasOwnProperty( elementId ) ) {\n                    result.push( elementId );\n                }\n            }\n    \n            return result;\n        },\n\n        getVersion: function () : string {\n            return \"4.0.0\";\n        }\n    };\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Initialize Heat.js\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    ( () => {\n        buildDefaultConfiguration();\n\n        documentObject.addEventListener( \"DOMContentLoaded\", function() {\n            render();\n        } );\n\n        windowObject.addEventListener( \"pagehide\", function() {\n            cancelAllPullDataTimers();\n        } );\n\n        if ( !isDefined( windowObject.$heat ) ) {\n            windowObject.$heat = _public;\n        }\n    } )();\n\n} )( document, window, Math, JSON );"]}